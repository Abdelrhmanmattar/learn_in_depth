
LCD_KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000002be  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c5d  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d6  00000000  00000000  000010b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000660  00000000  00000000  0000188f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00001ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d2  00000000  00000000  00001fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000575  00000000  00000000  000023b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000292b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 17 01 	call	0x22e	; 0x22e <main>
  7a:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <keypad_vInit>:

 #include "keypad_driver.h"
 void keypad_vInit()
 {
	//set port inputs and output pins
	 KEY_PAD_DDR  = 0x0f;
  82:	8f e0       	ldi	r24, 0x0F	; 15
  84:	81 bb       	out	0x11, r24	; 17
	 KEY_PAD_PORT = 0xf0;	  
  86:	80 ef       	ldi	r24, 0xF0	; 240
  88:	82 bb       	out	0x12, r24	; 18
  8a:	08 95       	ret

0000008c <keypad_u8check_press>:
 }
 char keypad_u8check_press()
 {
  8c:	0f 93       	push	r16
  8e:	1f 93       	push	r17
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	60 97       	sbiw	r28, 0x10	; 16
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	f8 94       	cli
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	cd bf       	out	0x3d, r28	; 61
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
  a4:	80 e1       	ldi	r24, 0x10	; 16
  a6:	e0 e6       	ldi	r30, 0x60	; 96
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	de 01       	movw	r26, r28
  ac:	11 96       	adiw	r26, 0x01	; 1
  ae:	01 90       	ld	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	8a 95       	dec	r24
  b4:	e1 f7       	brne	.-8      	; 0xae <keypad_u8check_press+0x22>
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
	 for(row=0;row<4;row++)
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	41 c0       	rjmp	.+130    	; 0x13e <keypad_u8check_press+0xb2>
	 {
		 KEY_PAD_PORT |=0X0F;
  bc:	92 b3       	in	r25, 0x12	; 18
  be:	9f 60       	ori	r25, 0x0F	; 15
  c0:	92 bb       	out	0x12, r25	; 18
		 CLR_BIT(KEY_PAD_PORT,row);
  c2:	92 b3       	in	r25, 0x12	; 18
  c4:	a7 2f       	mov	r26, r23
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	41 e0       	ldi	r20, 0x01	; 1
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	07 2e       	mov	r0, r23
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <keypad_u8check_press+0x48>
  d0:	44 0f       	add	r20, r20
  d2:	55 1f       	adc	r21, r21
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <keypad_u8check_press+0x44>
  d8:	40 95       	com	r20
  da:	49 23       	and	r20, r25
  dc:	42 bb       	out	0x12, r20	; 18
		 
		 for(coloumn=0;coloumn<4;coloumn++)
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	29 c0       	rjmp	.+82     	; 0x134 <keypad_u8check_press+0xa8>
		 {
			 x=READ_BIT(KEY_PAD_PIN,(coloumn+4));
  e2:	60 b3       	in	r22, 0x10	; 16
  e4:	e9 2f       	mov	r30, r25
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	8f 01       	movw	r16, r30
  ea:	0c 5f       	subi	r16, 0xFC	; 252
  ec:	1f 4f       	sbci	r17, 0xFF	; 255
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	a9 01       	movw	r20, r18
  f4:	00 2e       	mov	r0, r16
  f6:	02 c0       	rjmp	.+4      	; 0xfc <keypad_u8check_press+0x70>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <keypad_u8check_press+0x6c>
 100:	26 2f       	mov	r18, r22
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	24 23       	and	r18, r20
 106:	35 23       	and	r19, r21
 108:	02 c0       	rjmp	.+4      	; 0x10e <keypad_u8check_press+0x82>
 10a:	35 95       	asr	r19
 10c:	27 95       	ror	r18
 10e:	0a 95       	dec	r16
 110:	e2 f7       	brpl	.-8      	; 0x10a <keypad_u8check_press+0x7e>
			 if(x==0)
 112:	21 11       	cpse	r18, r1
 114:	0e c0       	rjmp	.+28     	; 0x132 <keypad_u8check_press+0xa6>
			 {
				 returnval=arr[row][coloumn];
 116:	aa 0f       	add	r26, r26
 118:	bb 1f       	adc	r27, r27
 11a:	aa 0f       	add	r26, r26
 11c:	bb 1f       	adc	r27, r27
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	8c 0f       	add	r24, r28
 124:	9d 1f       	adc	r25, r29
 126:	a8 0f       	add	r26, r24
 128:	b9 1f       	adc	r27, r25
 12a:	ea 0f       	add	r30, r26
 12c:	fb 1f       	adc	r31, r27
 12e:	80 81       	ld	r24, Z
				 break;
 130:	03 c0       	rjmp	.+6      	; 0x138 <keypad_u8check_press+0xac>
	 for(row=0;row<4;row++)
	 {
		 KEY_PAD_PORT |=0X0F;
		 CLR_BIT(KEY_PAD_PORT,row);
		 
		 for(coloumn=0;coloumn<4;coloumn++)
 132:	9f 5f       	subi	r25, 0xFF	; 255
 134:	94 30       	cpi	r25, 0x04	; 4
 136:	a8 f2       	brcs	.-86     	; 0xe2 <keypad_u8check_press+0x56>
			 {
				 returnval=arr[row][coloumn];
				 break;
			 }
		 }
		 if(x==0)
 138:	22 23       	and	r18, r18
 13a:	21 f0       	breq	.+8      	; 0x144 <keypad_u8check_press+0xb8>
 char keypad_u8check_press()
 {
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
 13c:	7f 5f       	subi	r23, 0xFF	; 255
 13e:	74 30       	cpi	r23, 0x04	; 4
 140:	08 f4       	brcc	.+2      	; 0x144 <keypad_u8check_press+0xb8>
 142:	bc cf       	rjmp	.-136    	; 0xbc <keypad_u8check_press+0x30>
		 {
			 break;
		 }
	 }
	 return returnval ;	 
 144:	60 96       	adiw	r28, 0x10	; 16
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	08 95       	ret

0000015a <enable>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	88 b3       	in	r24, 0x18	; 24
 15c:	88 60       	ori	r24, 0x08	; 8
 15e:	88 bb       	out	0x18, r24	; 24
 160:	8f e4       	ldi	r24, 0x4F	; 79
 162:	93 ec       	ldi	r25, 0xC3	; 195
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <enable+0xa>
 168:	00 c0       	rjmp	.+0      	; 0x16a <enable+0x10>
 16a:	00 00       	nop
 16c:	88 b3       	in	r24, 0x18	; 24
 16e:	87 7f       	andi	r24, 0xF7	; 247
 170:	88 bb       	out	0x18, r24	; 24
 172:	8f e4       	ldi	r24, 0x4F	; 79
 174:	93 ec       	ldi	r25, 0xC3	; 195
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <enable+0x1c>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <enable+0x22>
 17c:	00 00       	nop
 17e:	08 95       	ret

00000180 <lcd_cmd>:
 180:	98 b3       	in	r25, 0x18	; 24
 182:	9d 7f       	andi	r25, 0xFD	; 253
 184:	98 bb       	out	0x18, r25	; 24
 186:	98 b3       	in	r25, 0x18	; 24
 188:	9b 7f       	andi	r25, 0xFB	; 251
 18a:	98 bb       	out	0x18, r25	; 24
 18c:	8b bb       	out	0x1b, r24	; 27
 18e:	0e 94 ad 00 	call	0x15a	; 0x15a <enable>
 192:	8f e5       	ldi	r24, 0x5F	; 95
 194:	9a ee       	ldi	r25, 0xEA	; 234
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_cmd+0x16>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_cmd+0x1c>
 19c:	00 00       	nop
 19e:	08 95       	ret

000001a0 <lcd_init>:
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	81 ee       	ldi	r24, 0xE1	; 225
 1a4:	94 e0       	ldi	r25, 0x04	; 4
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <lcd_init+0x6>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x10>
 1b0:	00 00       	nop
 1b2:	87 b3       	in	r24, 0x17	; 23
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	87 bb       	out	0x17, r24	; 23
 1b8:	87 b3       	in	r24, 0x17	; 23
 1ba:	84 60       	ori	r24, 0x04	; 4
 1bc:	87 bb       	out	0x17, r24	; 23
 1be:	87 b3       	in	r24, 0x17	; 23
 1c0:	88 60       	ori	r24, 0x08	; 8
 1c2:	87 bb       	out	0x17, r24	; 23
 1c4:	88 b3       	in	r24, 0x18	; 24
 1c6:	8d 7f       	andi	r24, 0xFD	; 253
 1c8:	88 bb       	out	0x18, r24	; 24
 1ca:	88 b3       	in	r24, 0x18	; 24
 1cc:	8b 7f       	andi	r24, 0xFB	; 251
 1ce:	88 bb       	out	0x18, r24	; 24
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	8a bb       	out	0x1a, r24	; 26
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_cmd>
 1da:	88 e3       	ldi	r24, 0x38	; 56
 1dc:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_cmd>
 1e0:	86 e0       	ldi	r24, 0x06	; 6
 1e2:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_cmd>
 1e6:	80 e8       	ldi	r24, 0x80	; 128
 1e8:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_cmd>
 1ec:	8f e0       	ldi	r24, 0x0F	; 15
 1ee:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_cmd>
 1f2:	08 95       	ret

000001f4 <lcd_char>:
	lcd_cmd(data);
	_delay_ms(1);
}
void lcd_char(char data)
{
	SET_BIT(LCD_CONTROL_PORT,RS_PIN);
 1f4:	98 b3       	in	r25, 0x18	; 24
 1f6:	92 60       	ori	r25, 0x02	; 2
 1f8:	98 bb       	out	0x18, r25	; 24
	CLR_BIT(LCD_CONTROL_PORT,RW_PIN);
 1fa:	98 b3       	in	r25, 0x18	; 24
 1fc:	9b 7f       	andi	r25, 0xFB	; 251
 1fe:	98 bb       	out	0x18, r25	; 24
	#if defined EIGHT_BIT_MODE
	LCD_DATA_PORT=data;
 200:	8b bb       	out	0x1b, r24	; 27
	enable();
 202:	0e 94 ad 00 	call	0x15a	; 0x15a <enable>
 206:	8f e5       	ldi	r24, 0x5F	; 95
 208:	9a ee       	ldi	r25, 0xEA	; 234
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_char+0x16>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <lcd_char+0x1c>
 210:	00 00       	nop
 212:	08 95       	ret

00000214 <lcd_string>:
	#endif
	
	_delay_ms(30);
}
void lcd_string(char * data)
{
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
	
	while(*data != '\0')
 21a:	03 c0       	rjmp	.+6      	; 0x222 <lcd_string+0xe>
	{
		lcd_char(*data);
 21c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_char>
		data++;
 220:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(30);
}
void lcd_string(char * data)
{
	
	while(*data != '\0')
 222:	88 81       	ld	r24, Y
 224:	81 11       	cpse	r24, r1
 226:	fa cf       	rjmp	.-12     	; 0x21c <lcd_string+0x8>
	{
		lcd_char(*data);
		data++;
	}
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <main>:
#include "keypad_driver.h"
#include "lcd.h"

int main(void)
{
	lcd_init();
 22e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_init>
 232:	8f e3       	ldi	r24, 0x3F	; 63
 234:	9c e9       	ldi	r25, 0x9C	; 156
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <main+0x8>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0xe>
 23c:	00 00       	nop
	_delay_ms(20);
	lcd_string("lcd is work");
 23e:	80 e7       	ldi	r24, 0x70	; 112
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_string>
 246:	9f ef       	ldi	r25, 0xFF	; 255
 248:	29 e6       	ldi	r18, 0x69	; 105
 24a:	88 e1       	ldi	r24, 0x18	; 24
 24c:	91 50       	subi	r25, 0x01	; 1
 24e:	20 40       	sbci	r18, 0x00	; 0
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <main+0x1e>
 254:	00 c0       	rjmp	.+0      	; 0x256 <main+0x28>
 256:	00 00       	nop
	_delay_ms(1000);
	lcd_cmd(LCD_CLEAR_SCREEN);
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_cmd>
	keypad_vInit();
 25e:	0e 94 41 00 	call	0x82	; 0x82 <keypad_vInit>
	lcd_string("keypad is work");
 262:	8c e7       	ldi	r24, 0x7C	; 124
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_string>
 26a:	9f ef       	ldi	r25, 0xFF	; 255
 26c:	29 e6       	ldi	r18, 0x69	; 105
 26e:	88 e1       	ldi	r24, 0x18	; 24
 270:	91 50       	subi	r25, 0x01	; 1
 272:	20 40       	sbci	r18, 0x00	; 0
 274:	80 40       	sbci	r24, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0x42>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x4c>
 27a:	00 00       	nop
	_delay_ms(1000);
	lcd_cmd(LCD_CLEAR_SCREEN);
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_cmd>
#include <util/delay.h>
#include "keypad_driver.h"
#include "lcd.h"

int main(void)
{
 282:	c0 e0       	ldi	r28, 0x00	; 0
	lcd_cmd(LCD_CLEAR_SCREEN);
    /* Replace with your application code */
	uint8_t count = 0;
    while (1) 
    {
		    uint8_t key = keypad_u8check_press();
 284:	0e 94 46 00 	call	0x8c	; 0x8c <keypad_u8check_press>
		    //display the key on the LCD
		    if(key != 0xff)
 288:	8f 3f       	cpi	r24, 0xFF	; 255
 28a:	61 f0       	breq	.+24     	; 0x2a4 <main+0x76>
		    {
			    count++;
 28c:	cf 5f       	subi	r28, 0xFF	; 255
			    lcd_char(key);
 28e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_char>
 292:	9f ef       	ldi	r25, 0xFF	; 255
 294:	21 ee       	ldi	r18, 0xE1	; 225
 296:	84 e0       	ldi	r24, 0x04	; 4
 298:	91 50       	subi	r25, 0x01	; 1
 29a:	20 40       	sbci	r18, 0x00	; 0
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <main+0x6a>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <main+0x74>
 2a2:	00 00       	nop
			    _delay_ms(200);
		    }
		    if(count == 16)
 2a4:	c0 31       	cpi	r28, 0x10	; 16
 2a6:	19 f4       	brne	.+6      	; 0x2ae <main+0x80>
		    {
			    lcd_cmd(LCD_BEGIN_AT_SECOND_ROW);
 2a8:	80 ec       	ldi	r24, 0xC0	; 192
 2aa:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_cmd>
		    }
		    if (count >= 32)
 2ae:	c0 32       	cpi	r28, 0x20	; 32
 2b0:	48 f3       	brcs	.-46     	; 0x284 <main+0x56>
		    {
			    lcd_cmd(LCD_BEGIN_AT_FIRST_ROW);
 2b2:	80 e8       	ldi	r24, 0x80	; 128
 2b4:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_cmd>
 2b8:	e4 cf       	rjmp	.-56     	; 0x282 <main+0x54>

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
