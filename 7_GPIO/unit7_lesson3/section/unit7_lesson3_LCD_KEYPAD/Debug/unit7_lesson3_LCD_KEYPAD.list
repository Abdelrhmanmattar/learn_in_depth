
unit7_lesson3_LCD_KEYPAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007c4  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080008f4  080008f4  000018f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000938  08000938  00002010  2**0
                  CONTENTS
  4 .ARM          00000000  08000938  08000938  00002010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000938  08000938  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000938  08000938  00001938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800093c  0800093c  0000193c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08000940  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000010  08000950  00002010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000950  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000120d  00000000  00000000  00002039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000654  00000000  00000000  00003246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000748  00000000  00000000  0000389a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  00003fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000100  00000000  00000000  00004140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000022ed  00000000  00000000  00004240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000026e7  00000000  00000000  0000652d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007e98  00000000  00000000  00008c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010aac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003cc  00000000  00000000  00010af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	080008dc 	.word	0x080008dc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	080008dc 	.word	0x080008dc

08000170 <Keypad_init>:
const uint8_t arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};



void Keypad_init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
    GPIOB_ClockEnable();
 8000176:	4b1b      	ldr	r3, [pc, #108]	@ (80001e4 <Keypad_init+0x74>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	4a1a      	ldr	r2, [pc, #104]	@ (80001e4 <Keypad_init+0x74>)
 800017c:	f043 0308 	orr.w	r3, r3, #8
 8000180:	6193      	str	r3, [r2, #24]
    PIN_CONFIG_t Keypad_PinConfig;
    //start with ROWS are output and COLUMNS are input
    Keypad_PinConfig.GPIO_PinMode = Output_General_PushPull;
 8000182:	2300      	movs	r3, #0
 8000184:	707b      	strb	r3, [r7, #1]
    Keypad_PinConfig.GPIO_Direction = Output_10MHz;
 8000186:	2301      	movs	r3, #1
 8000188:	70bb      	strb	r3, [r7, #2]
    for(uint8_t i=0;i<4;i++)
 800018a:	2300      	movs	r3, #0
 800018c:	71fb      	strb	r3, [r7, #7]
 800018e:	e00b      	b.n	80001a8 <Keypad_init+0x38>
    {
        Keypad_PinConfig.GPIO_PinNumber = KEY_ROWS[i];
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	4a15      	ldr	r2, [pc, #84]	@ (80001e8 <Keypad_init+0x78>)
 8000194:	5cd3      	ldrb	r3, [r2, r3]
 8000196:	703b      	strb	r3, [r7, #0]
        MCAL_GPIO_Init(KEYPAD_PORT,&Keypad_PinConfig);
 8000198:	463b      	mov	r3, r7
 800019a:	4619      	mov	r1, r3
 800019c:	4813      	ldr	r0, [pc, #76]	@ (80001ec <Keypad_init+0x7c>)
 800019e:	f000 fa13 	bl	80005c8 <MCAL_GPIO_Init>
    for(uint8_t i=0;i<4;i++)
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	3301      	adds	r3, #1
 80001a6:	71fb      	strb	r3, [r7, #7]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	2b03      	cmp	r3, #3
 80001ac:	d9f0      	bls.n	8000190 <Keypad_init+0x20>
    }

    Keypad_PinConfig.GPIO_PinMode = Input_PullUp;
 80001ae:	2302      	movs	r3, #2
 80001b0:	707b      	strb	r3, [r7, #1]
    Keypad_PinConfig.GPIO_Direction = Input;
 80001b2:	2300      	movs	r3, #0
 80001b4:	70bb      	strb	r3, [r7, #2]
    for(uint8_t i=0;i<4;i++)
 80001b6:	2300      	movs	r3, #0
 80001b8:	71bb      	strb	r3, [r7, #6]
 80001ba:	e00b      	b.n	80001d4 <Keypad_init+0x64>
    {
        Keypad_PinConfig.GPIO_PinNumber = KEY_COLS[i];
 80001bc:	79bb      	ldrb	r3, [r7, #6]
 80001be:	4a0c      	ldr	r2, [pc, #48]	@ (80001f0 <Keypad_init+0x80>)
 80001c0:	5cd3      	ldrb	r3, [r2, r3]
 80001c2:	703b      	strb	r3, [r7, #0]
        MCAL_GPIO_Init(KEYPAD_PORT,&Keypad_PinConfig);
 80001c4:	463b      	mov	r3, r7
 80001c6:	4619      	mov	r1, r3
 80001c8:	4808      	ldr	r0, [pc, #32]	@ (80001ec <Keypad_init+0x7c>)
 80001ca:	f000 f9fd 	bl	80005c8 <MCAL_GPIO_Init>
    for(uint8_t i=0;i<4;i++)
 80001ce:	79bb      	ldrb	r3, [r7, #6]
 80001d0:	3301      	adds	r3, #1
 80001d2:	71bb      	strb	r3, [r7, #6]
 80001d4:	79bb      	ldrb	r3, [r7, #6]
 80001d6:	2b03      	cmp	r3, #3
 80001d8:	d9f0      	bls.n	80001bc <Keypad_init+0x4c>
    }
}
 80001da:	bf00      	nop
 80001dc:	bf00      	nop
 80001de:	3708      	adds	r7, #8
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	40021000 	.word	0x40021000
 80001e8:	08000920 	.word	0x08000920
 80001ec:	40010c00 	.word	0x40010c00
 80001f0:	08000924 	.word	0x08000924

080001f4 <Keypad_getkey>:

uint8_t Keypad_getkey(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
    uint8_t row,coloumn,x;
	uint8_t  returnval=0xff;
 80001fa:	23ff      	movs	r3, #255	@ 0xff
 80001fc:	713b      	strb	r3, [r7, #4]

    for(row=0;row<4;row++)
 80001fe:	2300      	movs	r3, #0
 8000200:	71fb      	strb	r3, [r7, #7]
 8000202:	e04c      	b.n	800029e <Keypad_getkey+0xaa>
    {
        //make all row pins high except the current row
        MCAL_GPIO_WritePin(KEYPAD_PORT,KEY_ROWS[0],GPIO_PIN_SET);
 8000204:	2300      	movs	r3, #0
 8000206:	2201      	movs	r2, #1
 8000208:	4619      	mov	r1, r3
 800020a:	4829      	ldr	r0, [pc, #164]	@ (80002b0 <Keypad_getkey+0xbc>)
 800020c:	f000 fa57 	bl	80006be <MCAL_GPIO_WritePin>
        MCAL_GPIO_WritePin(KEYPAD_PORT,KEY_ROWS[1],GPIO_PIN_SET);
 8000210:	2301      	movs	r3, #1
 8000212:	2201      	movs	r2, #1
 8000214:	4619      	mov	r1, r3
 8000216:	4826      	ldr	r0, [pc, #152]	@ (80002b0 <Keypad_getkey+0xbc>)
 8000218:	f000 fa51 	bl	80006be <MCAL_GPIO_WritePin>
        MCAL_GPIO_WritePin(KEYPAD_PORT,KEY_ROWS[2],GPIO_PIN_SET);
 800021c:	2303      	movs	r3, #3
 800021e:	2201      	movs	r2, #1
 8000220:	4619      	mov	r1, r3
 8000222:	4823      	ldr	r0, [pc, #140]	@ (80002b0 <Keypad_getkey+0xbc>)
 8000224:	f000 fa4b 	bl	80006be <MCAL_GPIO_WritePin>
        MCAL_GPIO_WritePin(KEYPAD_PORT,KEY_ROWS[3],GPIO_PIN_SET);
 8000228:	2304      	movs	r3, #4
 800022a:	2201      	movs	r2, #1
 800022c:	4619      	mov	r1, r3
 800022e:	4820      	ldr	r0, [pc, #128]	@ (80002b0 <Keypad_getkey+0xbc>)
 8000230:	f000 fa45 	bl	80006be <MCAL_GPIO_WritePin>
        MCAL_GPIO_WritePin(KEYPAD_PORT,KEY_ROWS[row],GPIO_PIN_RESET);
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	4a1f      	ldr	r2, [pc, #124]	@ (80002b4 <Keypad_getkey+0xc0>)
 8000238:	5cd3      	ldrb	r3, [r2, r3]
 800023a:	2200      	movs	r2, #0
 800023c:	4619      	mov	r1, r3
 800023e:	481c      	ldr	r0, [pc, #112]	@ (80002b0 <Keypad_getkey+0xbc>)
 8000240:	f000 fa3d 	bl	80006be <MCAL_GPIO_WritePin>

        //check the columns
        for(coloumn=0;coloumn<4;coloumn++)
 8000244:	2300      	movs	r3, #0
 8000246:	71bb      	strb	r3, [r7, #6]
 8000248:	e023      	b.n	8000292 <Keypad_getkey+0x9e>
        {
            x=MCAL_GPIO_ReadPin(KEYPAD_PORT,KEY_COLS[coloumn]);
 800024a:	79bb      	ldrb	r3, [r7, #6]
 800024c:	4a1a      	ldr	r2, [pc, #104]	@ (80002b8 <Keypad_getkey+0xc4>)
 800024e:	5cd3      	ldrb	r3, [r2, r3]
 8000250:	4619      	mov	r1, r3
 8000252:	4817      	ldr	r0, [pc, #92]	@ (80002b0 <Keypad_getkey+0xbc>)
 8000254:	f000 fa1f 	bl	8000696 <MCAL_GPIO_ReadPin>
 8000258:	4603      	mov	r3, r0
 800025a:	717b      	strb	r3, [r7, #5]
            if(x==0)
 800025c:	797b      	ldrb	r3, [r7, #5]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d114      	bne.n	800028c <Keypad_getkey+0x98>
            {
                returnval=arr[row][coloumn];
 8000262:	79fa      	ldrb	r2, [r7, #7]
 8000264:	79bb      	ldrb	r3, [r7, #6]
 8000266:	4915      	ldr	r1, [pc, #84]	@ (80002bc <Keypad_getkey+0xc8>)
 8000268:	0092      	lsls	r2, r2, #2
 800026a:	440a      	add	r2, r1
 800026c:	4413      	add	r3, r2
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	713b      	strb	r3, [r7, #4]
                while(x==0)
 8000272:	e008      	b.n	8000286 <Keypad_getkey+0x92>
                {
                    x=MCAL_GPIO_ReadPin(KEYPAD_PORT,KEY_COLS[coloumn]);
 8000274:	79bb      	ldrb	r3, [r7, #6]
 8000276:	4a10      	ldr	r2, [pc, #64]	@ (80002b8 <Keypad_getkey+0xc4>)
 8000278:	5cd3      	ldrb	r3, [r2, r3]
 800027a:	4619      	mov	r1, r3
 800027c:	480c      	ldr	r0, [pc, #48]	@ (80002b0 <Keypad_getkey+0xbc>)
 800027e:	f000 fa0a 	bl	8000696 <MCAL_GPIO_ReadPin>
 8000282:	4603      	mov	r3, r0
 8000284:	717b      	strb	r3, [r7, #5]
                while(x==0)
 8000286:	797b      	ldrb	r3, [r7, #5]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d0f3      	beq.n	8000274 <Keypad_getkey+0x80>
        for(coloumn=0;coloumn<4;coloumn++)
 800028c:	79bb      	ldrb	r3, [r7, #6]
 800028e:	3301      	adds	r3, #1
 8000290:	71bb      	strb	r3, [r7, #6]
 8000292:	79bb      	ldrb	r3, [r7, #6]
 8000294:	2b03      	cmp	r3, #3
 8000296:	d9d8      	bls.n	800024a <Keypad_getkey+0x56>
    for(row=0;row<4;row++)
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	3301      	adds	r3, #1
 800029c:	71fb      	strb	r3, [r7, #7]
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	d9af      	bls.n	8000204 <Keypad_getkey+0x10>
                }
            }
        }
    }
    return returnval;
 80002a4:	793b      	ldrb	r3, [r7, #4]
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	08000920 	.word	0x08000920
 80002b8:	08000924 	.word	0x08000924
 80002bc:	08000928 	.word	0x08000928

080002c0 <delay_ms>:
#include"LCD.h"


static void delay_ms(uint32_t time) {
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++){
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	e00b      	b.n	80002e6 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 80002ce:	2300      	movs	r3, #0
 80002d0:	60bb      	str	r3, [r7, #8]
 80002d2:	e002      	b.n	80002da <delay_ms+0x1a>
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	3301      	adds	r3, #1
 80002d8:	60bb      	str	r3, [r7, #8]
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	2bfe      	cmp	r3, #254	@ 0xfe
 80002de:	d9f9      	bls.n	80002d4 <delay_ms+0x14>
	for (i = 0; i < time; i++){
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	3301      	adds	r3, #1
 80002e4:	60fb      	str	r3, [r7, #12]
 80002e6:	68fa      	ldr	r2, [r7, #12]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d3ef      	bcc.n	80002ce <delay_ms+0xe>
		{}
	}
}
 80002ee:	bf00      	nop
 80002f0:	bf00      	nop
 80002f2:	3714      	adds	r7, #20
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
	...

080002fc <LCD_PINS_INIT>:

static void LCD_PINS_INIT(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
    // Initialize LCD pins
    #if defined EIGHT_BIT_MODE
    // Initialize LCD data pins
    PIN_CONFIG_t data_pins;
    data_pins.GPIO_PinNumber = DATA_PIN_START;
 8000302:	2300      	movs	r3, #0
 8000304:	713b      	strb	r3, [r7, #4]
    data_pins.GPIO_PinMode = Output_General_PushPull;
 8000306:	2300      	movs	r3, #0
 8000308:	717b      	strb	r3, [r7, #5]
    data_pins.GPIO_Direction = Output_10MHz;
 800030a:	2301      	movs	r3, #1
 800030c:	71bb      	strb	r3, [r7, #6]

    for(uint8_t i=0; i<EIGHT_BIT_MODE ;i++)
 800030e:	2300      	movs	r3, #0
 8000310:	71fb      	strb	r3, [r7, #7]
 8000312:	e009      	b.n	8000328 <LCD_PINS_INIT+0x2c>
    {
        data_pins.GPIO_PinNumber = DATA_PIN_START + i;
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	713b      	strb	r3, [r7, #4]
        MCAL_GPIO_Init(LCD_CONTROL_PORT, &data_pins);
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	4619      	mov	r1, r3
 800031c:	481a      	ldr	r0, [pc, #104]	@ (8000388 <LCD_PINS_INIT+0x8c>)
 800031e:	f000 f953 	bl	80005c8 <MCAL_GPIO_Init>
    for(uint8_t i=0; i<EIGHT_BIT_MODE ;i++)
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	3301      	adds	r3, #1
 8000326:	71fb      	strb	r3, [r7, #7]
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	2b07      	cmp	r3, #7
 800032c:	d9f2      	bls.n	8000314 <LCD_PINS_INIT+0x18>
    }

    // Initialize LCD control pins
    PIN_CONFIG_t control_pins;
    control_pins.GPIO_PinNumber = RS_PIN;
 800032e:	2308      	movs	r3, #8
 8000330:	703b      	strb	r3, [r7, #0]
    control_pins.GPIO_PinMode = Output_General_PushPull;
 8000332:	2300      	movs	r3, #0
 8000334:	707b      	strb	r3, [r7, #1]
    control_pins.GPIO_Direction = Output_10MHz;
 8000336:	2301      	movs	r3, #1
 8000338:	70bb      	strb	r3, [r7, #2]
    MCAL_GPIO_Init(LCD_CONTROL_PORT, &control_pins);
 800033a:	463b      	mov	r3, r7
 800033c:	4619      	mov	r1, r3
 800033e:	4812      	ldr	r0, [pc, #72]	@ (8000388 <LCD_PINS_INIT+0x8c>)
 8000340:	f000 f942 	bl	80005c8 <MCAL_GPIO_Init>

    control_pins.GPIO_PinNumber = RW_PIN;
 8000344:	2309      	movs	r3, #9
 8000346:	703b      	strb	r3, [r7, #0]
    MCAL_GPIO_Init(LCD_CONTROL_PORT, &control_pins);
 8000348:	463b      	mov	r3, r7
 800034a:	4619      	mov	r1, r3
 800034c:	480e      	ldr	r0, [pc, #56]	@ (8000388 <LCD_PINS_INIT+0x8c>)
 800034e:	f000 f93b 	bl	80005c8 <MCAL_GPIO_Init>

    control_pins.GPIO_PinNumber = EN_PIN;
 8000352:	230a      	movs	r3, #10
 8000354:	703b      	strb	r3, [r7, #0]
    MCAL_GPIO_Init(LCD_CONTROL_PORT, &control_pins);
 8000356:	463b      	mov	r3, r7
 8000358:	4619      	mov	r1, r3
 800035a:	480b      	ldr	r0, [pc, #44]	@ (8000388 <LCD_PINS_INIT+0x8c>)
 800035c:	f000 f934 	bl	80005c8 <MCAL_GPIO_Init>



    #endif

    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS_PIN, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2108      	movs	r1, #8
 8000364:	4808      	ldr	r0, [pc, #32]	@ (8000388 <LCD_PINS_INIT+0x8c>)
 8000366:	f000 f9aa 	bl	80006be <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW_PIN, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	2109      	movs	r1, #9
 800036e:	4806      	ldr	r0, [pc, #24]	@ (8000388 <LCD_PINS_INIT+0x8c>)
 8000370:	f000 f9a5 	bl	80006be <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN_PIN, GPIO_PIN_RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	210a      	movs	r1, #10
 8000378:	4803      	ldr	r0, [pc, #12]	@ (8000388 <LCD_PINS_INIT+0x8c>)
 800037a:	f000 f9a0 	bl	80006be <MCAL_GPIO_WritePin>
}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40010800 	.word	0x40010800

0800038c <LCD_ENABLE_PULSE>:

void LCD_ENABLE_PULSE(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
    // Enable pulse
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN_PIN, GPIO_PIN_SET);
 8000390:	2201      	movs	r2, #1
 8000392:	210a      	movs	r1, #10
 8000394:	4806      	ldr	r0, [pc, #24]	@ (80003b0 <LCD_ENABLE_PULSE+0x24>)
 8000396:	f000 f992 	bl	80006be <MCAL_GPIO_WritePin>
    delay_ms(30);
 800039a:	201e      	movs	r0, #30
 800039c:	f7ff ff90 	bl	80002c0 <delay_ms>
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN_PIN, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	210a      	movs	r1, #10
 80003a4:	4802      	ldr	r0, [pc, #8]	@ (80003b0 <LCD_ENABLE_PULSE+0x24>)
 80003a6:	f000 f98a 	bl	80006be <MCAL_GPIO_WritePin>
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40010800 	.word	0x40010800

080003b4 <LCD_Init>:

void LCD_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
    // Initialize LCD AS 8-bit mode
    //delay for 20ms
    delay_ms(30);
 80003b8:	201e      	movs	r0, #30
 80003ba:	f7ff ff81 	bl	80002c0 <delay_ms>
    LCD_PINS_INIT();
 80003be:	f7ff ff9d 	bl	80002fc <LCD_PINS_INIT>
    delay_ms(30);
 80003c2:	201e      	movs	r0, #30
 80003c4:	f7ff ff7c 	bl	80002c0 <delay_ms>
    LCD_SendCommand(LCD_CLEAR_SCREEN);
 80003c8:	2001      	movs	r0, #1
 80003ca:	f000 f80f 	bl	80003ec <LCD_SendCommand>
    LCD_SendCommand(LCD_FUNCTION_8BIT_2LINES);
 80003ce:	2038      	movs	r0, #56	@ 0x38
 80003d0:	f000 f80c 	bl	80003ec <LCD_SendCommand>
    LCD_SendCommand(LCD_ENTRY_MODE);
 80003d4:	2006      	movs	r0, #6
 80003d6:	f000 f809 	bl	80003ec <LCD_SendCommand>
    LCD_SendCommand(LCD_BEGIN_AT_FIRST_ROW);
 80003da:	2080      	movs	r0, #128	@ 0x80
 80003dc:	f000 f806 	bl	80003ec <LCD_SendCommand>
    LCD_SendCommand(LCD_DISP_ON_CURSOR_BLINK);
 80003e0:	200f      	movs	r0, #15
 80003e2:	f000 f803 	bl	80003ec <LCD_SendCommand>
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <LCD_SendCommand>:

void LCD_SendCommand(uint8_t command)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
    // SEND COMMAND TO LCD
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS_PIN, GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2108      	movs	r1, #8
 80003fa:	4810      	ldr	r0, [pc, #64]	@ (800043c <LCD_SendCommand+0x50>)
 80003fc:	f000 f95f 	bl	80006be <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW_PIN, GPIO_PIN_RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	2109      	movs	r1, #9
 8000404:	480d      	ldr	r0, [pc, #52]	@ (800043c <LCD_SendCommand+0x50>)
 8000406:	f000 f95a 	bl	80006be <MCAL_GPIO_WritePin>

    #if defined EIGHT_BIT_MODE
    LCD_DATA_OUT_PORT &= ~(0xFF>>DATA_PIN_START);
 800040a:	4b0c      	ldr	r3, [pc, #48]	@ (800043c <LCD_SendCommand+0x50>)
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	4a0b      	ldr	r2, [pc, #44]	@ (800043c <LCD_SendCommand+0x50>)
 8000410:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000414:	60d3      	str	r3, [r2, #12]
    LCD_DATA_OUT_PORT |= ( ((uint16_t)command>>DATA_PIN_START) & 0xFFFF);
 8000416:	4b09      	ldr	r3, [pc, #36]	@ (800043c <LCD_SendCommand+0x50>)
 8000418:	68da      	ldr	r2, [r3, #12]
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	4907      	ldr	r1, [pc, #28]	@ (800043c <LCD_SendCommand+0x50>)
 800041e:	4313      	orrs	r3, r2
 8000420:	60cb      	str	r3, [r1, #12]
    delay_ms(1);
 8000422:	2001      	movs	r0, #1
 8000424:	f7ff ff4c 	bl	80002c0 <delay_ms>
    LCD_ENABLE_PULSE();
 8000428:	f7ff ffb0 	bl	800038c <LCD_ENABLE_PULSE>
    LCD_ENABLE_PULSE();
    LCD_DATA_OUT_PORT |= ((uint16_t)((command&0X0F)<<4)>>DATA_PIN_START);
    delay_ms(1);
    LCD_ENABLE_PULSE();
    #endif
    delay_ms(30);
 800042c:	201e      	movs	r0, #30
 800042e:	f7ff ff47 	bl	80002c0 <delay_ms>
}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40010800 	.word	0x40010800

08000440 <LCD_Sendchar>:

void LCD_Sendchar(uint8_t data)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	71fb      	strb	r3, [r7, #7]
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS_PIN, GPIO_PIN_SET);
 800044a:	2201      	movs	r2, #1
 800044c:	2108      	movs	r1, #8
 800044e:	480e      	ldr	r0, [pc, #56]	@ (8000488 <LCD_Sendchar+0x48>)
 8000450:	f000 f935 	bl	80006be <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW_PIN, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2109      	movs	r1, #9
 8000458:	480b      	ldr	r0, [pc, #44]	@ (8000488 <LCD_Sendchar+0x48>)
 800045a:	f000 f930 	bl	80006be <MCAL_GPIO_WritePin>

    #if defined EIGHT_BIT_MODE
    LCD_DATA_OUT_PORT &= ~(0xFF>>DATA_PIN_START);
 800045e:	4b0a      	ldr	r3, [pc, #40]	@ (8000488 <LCD_Sendchar+0x48>)
 8000460:	68db      	ldr	r3, [r3, #12]
 8000462:	4a09      	ldr	r2, [pc, #36]	@ (8000488 <LCD_Sendchar+0x48>)
 8000464:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000468:	60d3      	str	r3, [r2, #12]
    LCD_DATA_OUT_PORT |= ( ((uint16_t)data>>DATA_PIN_START) & 0xFFFF);
 800046a:	4b07      	ldr	r3, [pc, #28]	@ (8000488 <LCD_Sendchar+0x48>)
 800046c:	68da      	ldr	r2, [r3, #12]
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	4905      	ldr	r1, [pc, #20]	@ (8000488 <LCD_Sendchar+0x48>)
 8000472:	4313      	orrs	r3, r2
 8000474:	60cb      	str	r3, [r1, #12]
    delay_ms(1);
 8000476:	2001      	movs	r0, #1
 8000478:	f7ff ff22 	bl	80002c0 <delay_ms>
    LCD_ENABLE_PULSE();
 800047c:	f7ff ff86 	bl	800038c <LCD_ENABLE_PULSE>

    LCD_DATA_OUT_PORT |= ((uint16_t)((data&0X0F)<<4)>>DATA_PIN_START);
    delay_ms(1);
    LCD_ENABLE_PULSE();
    #endif
}
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40010800 	.word	0x40010800

0800048c <LCD_SendString>:

void LCD_SendString(const uint8_t *data)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
    uint8_t count = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	73fb      	strb	r3, [r7, #15]
    while(*data)
 8000498:	e018      	b.n	80004cc <LCD_SendString+0x40>
    {
        LCD_Sendchar(*data);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff ffce 	bl	8000440 <LCD_Sendchar>
        data++;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3301      	adds	r3, #1
 80004a8:	607b      	str	r3, [r7, #4]
        count++;
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
 80004ac:	3301      	adds	r3, #1
 80004ae:	73fb      	strb	r3, [r7, #15]
        if(count == 16)
 80004b0:	7bfb      	ldrb	r3, [r7, #15]
 80004b2:	2b10      	cmp	r3, #16
 80004b4:	d102      	bne.n	80004bc <LCD_SendString+0x30>
        {
            LCD_SendCommand(LCD_BEGIN_AT_SECOND_ROW);
 80004b6:	20c0      	movs	r0, #192	@ 0xc0
 80004b8:	f7ff ff98 	bl	80003ec <LCD_SendCommand>
        }
        if (count == 32)
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	2b20      	cmp	r3, #32
 80004c0:	d104      	bne.n	80004cc <LCD_SendString+0x40>
        {
            LCD_SendCommand(LCD_BEGIN_AT_FIRST_ROW);
 80004c2:	2080      	movs	r0, #128	@ 0x80
 80004c4:	f7ff ff92 	bl	80003ec <LCD_SendCommand>
            count =0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	73fb      	strb	r3, [r7, #15]
    while(*data)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d1e2      	bne.n	800049a <LCD_SendString+0xe>
        }        
    }
}
 80004d4:	bf00      	nop
 80004d6:	bf00      	nop
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}

080004de <segment_7_init>:
#include "Segment_7.h"


static uint8_t SEGMENT_7_NUMBER[] = {SEGMENT_7_ZERO, SEGMENT_7_ONE, SEGMENT_7_TWO, SEGMENT_7_THREE, SEGMENT_7_FOUR, SEGMENT_7_FIVE, SEGMENT_7_SIX, SEGMENT_7_SEVEN, SEGMENT_7_EIGHT, SEGMENT_7_NINE, SEGMENT_7_A, SEGMENT_7_B, SEGMENT_7_C, SEGMENT_7_D, SEGMENT_7_E, SEGMENT_7_F};
void segment_7_init(segment_7_t *pSegment_7)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	b084      	sub	sp, #16
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
    PIN_CONFIG_t pinConfig;
    pinConfig.GPIO_PinMode = Output_General_PushPull;
 80004e6:	2300      	movs	r3, #0
 80004e8:	737b      	strb	r3, [r7, #13]
    pinConfig.GPIO_Direction = Output_10MHz;
 80004ea:	2301      	movs	r3, #1
 80004ec:	73bb      	strb	r3, [r7, #14]

    for(uint8_t i=pSegment_7->start_pin ; i<pSegment_7->start_pin+8 ; i++)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	791b      	ldrb	r3, [r3, #4]
 80004f2:	73fb      	strb	r3, [r7, #15]
 80004f4:	e00c      	b.n	8000510 <segment_7_init+0x32>
    {
        pinConfig.GPIO_PinNumber = i;
 80004f6:	7bfb      	ldrb	r3, [r7, #15]
 80004f8:	733b      	strb	r3, [r7, #12]
        MCAL_GPIO_Init(pSegment_7->pGPIOx, &pinConfig);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f107 020c 	add.w	r2, r7, #12
 8000502:	4611      	mov	r1, r2
 8000504:	4618      	mov	r0, r3
 8000506:	f000 f85f 	bl	80005c8 <MCAL_GPIO_Init>
    for(uint8_t i=pSegment_7->start_pin ; i<pSegment_7->start_pin+8 ; i++)
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	3301      	adds	r3, #1
 800050e:	73fb      	strb	r3, [r7, #15]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	1dda      	adds	r2, r3, #7
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	429a      	cmp	r2, r3
 800051a:	daec      	bge.n	80004f6 <segment_7_init+0x18>
    }
    if(pSegment_7->comman == COMMAN_ANODE)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	795b      	ldrb	r3, [r3, #5]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d10d      	bne.n	8000540 <segment_7_init+0x62>
    {
        pSegment_7->pGPIOx->ODR |= (0x0000007FUL << pSegment_7->start_pin);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	68d9      	ldr	r1, [r3, #12]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	791b      	ldrb	r3, [r3, #4]
 800052e:	461a      	mov	r2, r3
 8000530:	237f      	movs	r3, #127	@ 0x7f
 8000532:	fa03 f202 	lsl.w	r2, r3, r2
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	430a      	orrs	r2, r1
 800053c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        pSegment_7->pGPIOx->ODR &= ~(0x0000007FUL << pSegment_7->start_pin);
    }
}
 800053e:	e00c      	b.n	800055a <segment_7_init+0x7c>
        pSegment_7->pGPIOx->ODR &= ~(0x0000007FUL << pSegment_7->start_pin);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	68d9      	ldr	r1, [r3, #12]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	791b      	ldrb	r3, [r3, #4]
 800054a:	461a      	mov	r2, r3
 800054c:	237f      	movs	r3, #127	@ 0x7f
 800054e:	4093      	lsls	r3, r2
 8000550:	43da      	mvns	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	400a      	ands	r2, r1
 8000558:	60da      	str	r2, [r3, #12]
}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <segment_7_display>:

void segment_7_display(segment_7_t *pSegment_7, uint8_t number)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	70fb      	strb	r3, [r7, #3]
    uint8_t temp = SEGMENT_7_NUMBER[number];
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	4a14      	ldr	r2, [pc, #80]	@ (80005c4 <segment_7_display+0x60>)
 8000574:	5cd3      	ldrb	r3, [r2, r3]
 8000576:	73fb      	strb	r3, [r7, #15]
    if (pSegment_7->comman == COMMAN_ANODE)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	795b      	ldrb	r3, [r3, #5]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d102      	bne.n	8000586 <segment_7_display+0x22>
    {
        temp = ~temp;
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	43db      	mvns	r3, r3
 8000584:	73fb      	strb	r3, [r7, #15]
    }
    
    pSegment_7->pGPIOx->ODR &= ~(0x0000007FUL << pSegment_7->start_pin);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	68d9      	ldr	r1, [r3, #12]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	461a      	mov	r2, r3
 8000592:	237f      	movs	r3, #127	@ 0x7f
 8000594:	4093      	lsls	r3, r2
 8000596:	43da      	mvns	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	400a      	ands	r2, r1
 800059e:	60da      	str	r2, [r3, #12]
    pSegment_7->pGPIOx->ODR |= ((uint32_t)temp << pSegment_7->start_pin);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	68d9      	ldr	r1, [r3, #12]
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	7912      	ldrb	r2, [r2, #4]
 80005ac:	fa03 f202 	lsl.w	r2, r3, r2
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	430a      	orrs	r2, r1
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000000 	.word	0x20000000

080005c8 <MCAL_GPIO_Init>:
#include "Stm32_F103C6_gpio_driver.h"

void MCAL_GPIO_Init(GPIOx_RegDef_t *GPIOx, PIN_CONFIG_t *pinConfig)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
    volatile uint32_t *pGPIOx = (pinConfig->GPIO_PinNumber>7)?&GPIOx->CRH:&GPIOx->CRL;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b07      	cmp	r3, #7
 80005d8:	d902      	bls.n	80005e0 <MCAL_GPIO_Init+0x18>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3304      	adds	r3, #4
 80005de:	e000      	b.n	80005e2 <MCAL_GPIO_Init+0x1a>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	617b      	str	r3, [r7, #20]

    // Clear the CNF bits and MODE bits before setting them
    uint32_t tem =  0x0000000f << (4*(pinConfig->GPIO_PinNumber%8));
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	f003 0307 	and.w	r3, r3, #7
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	220f      	movs	r2, #15
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	613b      	str	r3, [r7, #16]
    *pGPIOx &= ~(tem);//%8 to get the pin number in the range of 8 - 15 for CRH and 0 - 7 for CRL
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	693b      	ldr	r3, [r7, #16]
 80005fc:	43db      	mvns	r3, r3
 80005fe:	401a      	ands	r2, r3
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	601a      	str	r2, [r3, #0]
    uint8_t temp = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	73fb      	strb	r3, [r7, #15]
    uint8_t mode = (pinConfig->GPIO_PinMode>2)?(2):pinConfig->GPIO_PinMode;
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	785b      	ldrb	r3, [r3, #1]
 800060c:	2b02      	cmp	r3, #2
 800060e:	bf28      	it	cs
 8000610:	2302      	movcs	r3, #2
 8000612:	73bb      	strb	r3, [r7, #14]
    temp |= ((mode<<2) | (pinConfig->GPIO_Direction));
 8000614:	7bbb      	ldrb	r3, [r7, #14]
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	b25a      	sxtb	r2, r3
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	789b      	ldrb	r3, [r3, #2]
 800061e:	b25b      	sxtb	r3, r3
 8000620:	4313      	orrs	r3, r2
 8000622:	b25a      	sxtb	r2, r3
 8000624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000628:	4313      	orrs	r3, r2
 800062a:	b25b      	sxtb	r3, r3
 800062c:	73fb      	strb	r3, [r7, #15]
    *pGPIOx |= (temp << (4*(pinConfig->GPIO_PinNumber%8)));
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	7bf9      	ldrb	r1, [r7, #15]
 8000634:	683a      	ldr	r2, [r7, #0]
 8000636:	7812      	ldrb	r2, [r2, #0]
 8000638:	f002 0207 	and.w	r2, r2, #7
 800063c:	0092      	lsls	r2, r2, #2
 800063e:	fa01 f202 	lsl.w	r2, r1, r2
 8000642:	431a      	orrs	r2, r3
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	601a      	str	r2, [r3, #0]
    
    if(pinConfig->GPIO_Direction==Input)
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	789b      	ldrb	r3, [r3, #2]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d11d      	bne.n	800068c <MCAL_GPIO_Init+0xc4>
    {
        if(pinConfig->GPIO_PinMode==Input_PullUp)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	785b      	ldrb	r3, [r3, #1]
 8000654:	2b02      	cmp	r3, #2
 8000656:	d10a      	bne.n	800066e <MCAL_GPIO_Init+0xa6>
        {
            GPIOx->ODR |= (1<<pinConfig->GPIO_PinNumber);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	7812      	ldrb	r2, [r2, #0]
 8000660:	4611      	mov	r1, r2
 8000662:	2201      	movs	r2, #1
 8000664:	408a      	lsls	r2, r1
 8000666:	431a      	orrs	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	60da      	str	r2, [r3, #12]
        {
            GPIOx->ODR &= ~(1<<pinConfig->GPIO_PinNumber);
        }
    } 
    
}
 800066c:	e00e      	b.n	800068c <MCAL_GPIO_Init+0xc4>
        else if(pinConfig->GPIO_PinMode==Input_PullDown)
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	2b03      	cmp	r3, #3
 8000674:	d10a      	bne.n	800068c <MCAL_GPIO_Init+0xc4>
            GPIOx->ODR &= ~(1<<pinConfig->GPIO_PinNumber);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	68db      	ldr	r3, [r3, #12]
 800067a:	683a      	ldr	r2, [r7, #0]
 800067c:	7812      	ldrb	r2, [r2, #0]
 800067e:	4611      	mov	r1, r2
 8000680:	2201      	movs	r2, #1
 8000682:	408a      	lsls	r2, r1
 8000684:	43d2      	mvns	r2, r2
 8000686:	401a      	ands	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	60da      	str	r2, [r3, #12]
}
 800068c:	bf00      	nop
 800068e:	371c      	adds	r7, #28
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <MCAL_GPIO_ReadPin>:
    RCC->APB2RSTR &= ~(1<<(temp+2)); 
}


uint8_t MCAL_GPIO_ReadPin(GPIOx_RegDef_t *GPIOx, uint8_t PinNumber)
{
 8000696:	b480      	push	{r7}
 8000698:	b083      	sub	sp, #12
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
 800069e:	460b      	mov	r3, r1
 80006a0:	70fb      	strb	r3, [r7, #3]
    return  ((GPIOx->IDR >> PinNumber) & 0x1);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	689a      	ldr	r2, [r3, #8]
 80006a6:	78fb      	ldrb	r3, [r7, #3]
 80006a8:	fa22 f303 	lsr.w	r3, r2, r3
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	b2db      	uxtb	r3, r3
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <MCAL_GPIO_WritePin>:
{
    return (uint16_t)GPIOx->IDR;
}

void MCAL_GPIO_WritePin(GPIOx_RegDef_t *GPIOx, uint8_t PinNumber, uint8_t Value)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
 80006c6:	460b      	mov	r3, r1
 80006c8:	70fb      	strb	r3, [r7, #3]
 80006ca:	4613      	mov	r3, r2
 80006cc:	70bb      	strb	r3, [r7, #2]
    if (Value == GPIO_PIN_SET)
 80006ce:	78bb      	ldrb	r3, [r7, #2]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d109      	bne.n	80006e8 <MCAL_GPIO_WritePin+0x2a>
    {
        GPIOx->ODR |= (1<<PinNumber);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	78fa      	ldrb	r2, [r7, #3]
 80006da:	2101      	movs	r1, #1
 80006dc:	fa01 f202 	lsl.w	r2, r1, r2
 80006e0:	431a      	orrs	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	60da      	str	r2, [r3, #12]
    }
    else
    {
        GPIOx->ODR &= ~(1<<PinNumber);
    }
}
 80006e6:	e009      	b.n	80006fc <MCAL_GPIO_WritePin+0x3e>
        GPIOx->ODR &= ~(1<<PinNumber);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	78fa      	ldrb	r2, [r7, #3]
 80006ee:	2101      	movs	r1, #1
 80006f0:	fa01 f202 	lsl.w	r2, r1, r2
 80006f4:	43d2      	mvns	r2, r2
 80006f6:	401a      	ands	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	60da      	str	r2, [r3, #12]
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
	...

08000708 <CLOCK_INIT>:
#include "LCD.h"
#include"KEY_PAD.h"
#include "Segment_7.h"

void CLOCK_INIT(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  GPIOA_ClockEnable();
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <CLOCK_INIT+0x24>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a06      	ldr	r2, [pc, #24]	@ (800072c <CLOCK_INIT+0x24>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	6193      	str	r3, [r2, #24]
  GPIOB_ClockEnable();
 8000718:	4b04      	ldr	r3, [pc, #16]	@ (800072c <CLOCK_INIT+0x24>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a03      	ldr	r2, [pc, #12]	@ (800072c <CLOCK_INIT+0x24>)
 800071e:	f043 0308 	orr.w	r3, r3, #8
 8000722:	6193      	str	r3, [r2, #24]
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	40021000 	.word	0x40021000

08000730 <delay_ms>:
void delay_ms(uint32_t time) {
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	e00b      	b.n	8000756 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	e002      	b.n	800074a <delay_ms+0x1a>
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	3301      	adds	r3, #1
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	2bfe      	cmp	r3, #254	@ 0xfe
 800074e:	d9f9      	bls.n	8000744 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	3301      	adds	r3, #1
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	429a      	cmp	r2, r3
 800075c:	d3ef      	bcc.n	800073e <delay_ms+0xe>
			;
}
 800075e:	bf00      	nop
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
	...

0800076c <main>:
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
  // Initialize the clock
  CLOCK_INIT();
 8000772:	f7ff ffc9 	bl	8000708 <CLOCK_INIT>
  // Initialize the LCD
  LCD_Init();
 8000776:	f7ff fe1d 	bl	80003b4 <LCD_Init>
  delay_ms(10);
 800077a:	200a      	movs	r0, #10
 800077c:	f7ff ffd8 	bl	8000730 <delay_ms>
  // Display the string on the LCD
  LCD_SendString((const uint8_t *)"lcd is work");
 8000780:	482b      	ldr	r0, [pc, #172]	@ (8000830 <main+0xc4>)
 8000782:	f7ff fe83 	bl	800048c <LCD_SendString>
  delay_ms(500);
 8000786:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800078a:	f7ff ffd1 	bl	8000730 <delay_ms>
  // Clear the LCD
  LCD_SendCommand(LCD_CLEAR_SCREEN);
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff fe2c 	bl	80003ec <LCD_SendCommand>
  delay_ms(10);
 8000794:	200a      	movs	r0, #10
 8000796:	f7ff ffcb 	bl	8000730 <delay_ms>
  //initialize the keypad
  Keypad_init();
 800079a:	f7ff fce9 	bl	8000170 <Keypad_init>
  LCD_SendString((const uint8_t *)"keypad is work");
 800079e:	4825      	ldr	r0, [pc, #148]	@ (8000834 <main+0xc8>)
 80007a0:	f7ff fe74 	bl	800048c <LCD_SendString>
  delay_ms(500);
 80007a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007a8:	f7ff ffc2 	bl	8000730 <delay_ms>
  // Clear the LCD
  LCD_SendCommand(LCD_CLEAR_SCREEN);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff fe1d 	bl	80003ec <LCD_SendCommand>
  delay_ms(10);
 80007b2:	200a      	movs	r0, #10
 80007b4:	f7ff ffbc 	bl	8000730 <delay_ms>
  //initialize the segment 7
  segment_7_t seg1;
  seg1.pGPIOx = GPIOB;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <main+0xcc>)
 80007ba:	607b      	str	r3, [r7, #4]
  seg1.start_pin = GPIO_PIN_9;
 80007bc:	2309      	movs	r3, #9
 80007be:	723b      	strb	r3, [r7, #8]
  seg1.comman = COMMAN_ANODE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	727b      	strb	r3, [r7, #9]
  segment_7_init(&seg1);
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fe89 	bl	80004de <segment_7_init>
  LCD_SendString((const uint8_t *)"7seg is work");
 80007cc:	481b      	ldr	r0, [pc, #108]	@ (800083c <main+0xd0>)
 80007ce:	f7ff fe5d 	bl	800048c <LCD_SendString>
  delay_ms(500);
 80007d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007d6:	f7ff ffab 	bl	8000730 <delay_ms>
  // Clear the LCD
  LCD_SendCommand(LCD_CLEAR_SCREEN);
 80007da:	2001      	movs	r0, #1
 80007dc:	f7ff fe06 	bl	80003ec <LCD_SendCommand>

  uint8_t count = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	73fb      	strb	r3, [r7, #15]
  while(1)
  {
    //wait for the key press
    uint8_t key = Keypad_getkey();
 80007e4:	f7ff fd06 	bl	80001f4 <Keypad_getkey>
 80007e8:	4603      	mov	r3, r0
 80007ea:	73bb      	strb	r3, [r7, #14]
    //display the key on the LCD
    if(key != 0xff)
 80007ec:	7bbb      	ldrb	r3, [r7, #14]
 80007ee:	2bff      	cmp	r3, #255	@ 0xff
 80007f0:	d00e      	beq.n	8000810 <main+0xa4>
    {
      count++;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	3301      	adds	r3, #1
 80007f6:	73fb      	strb	r3, [r7, #15]
      LCD_Sendchar(key);
 80007f8:	7bbb      	ldrb	r3, [r7, #14]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fe20 	bl	8000440 <LCD_Sendchar>
      segment_7_display(&seg1,key-'0');
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	3b30      	subs	r3, #48	@ 0x30
 8000804:	b2da      	uxtb	r2, r3
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4611      	mov	r1, r2
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff feaa 	bl	8000564 <segment_7_display>
    }
    if(count == 16)
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	2b10      	cmp	r3, #16
 8000814:	d102      	bne.n	800081c <main+0xb0>
    {
      LCD_SendCommand(LCD_BEGIN_AT_SECOND_ROW);
 8000816:	20c0      	movs	r0, #192	@ 0xc0
 8000818:	f7ff fde8 	bl	80003ec <LCD_SendCommand>
    }
    if (count >= 32)
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	2b1f      	cmp	r3, #31
 8000820:	d9e0      	bls.n	80007e4 <main+0x78>
    {
      LCD_SendCommand(LCD_BEGIN_AT_FIRST_ROW);
 8000822:	2080      	movs	r0, #128	@ 0x80
 8000824:	f7ff fde2 	bl	80003ec <LCD_SendCommand>
      count =0;
 8000828:	2300      	movs	r3, #0
 800082a:	73fb      	strb	r3, [r7, #15]
  {
 800082c:	e7da      	b.n	80007e4 <main+0x78>
 800082e:	bf00      	nop
 8000830:	080008f4 	.word	0x080008f4
 8000834:	08000900 	.word	0x08000900
 8000838:	40010c00 	.word	0x40010c00
 800083c:	08000910 	.word	0x08000910

08000840 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000840:	480d      	ldr	r0, [pc, #52]	@ (8000878 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000842:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000844:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000848:	480c      	ldr	r0, [pc, #48]	@ (800087c <LoopForever+0x6>)
  ldr r1, =_edata
 800084a:	490d      	ldr	r1, [pc, #52]	@ (8000880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800084c:	4a0d      	ldr	r2, [pc, #52]	@ (8000884 <LoopForever+0xe>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a0a      	ldr	r2, [pc, #40]	@ (8000888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000860:	4c0a      	ldr	r4, [pc, #40]	@ (800088c <LoopForever+0x16>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800086e:	f000 f811 	bl	8000894 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000872:	f7ff ff7b 	bl	800076c <main>

08000876 <LoopForever>:

LoopForever:
  b LoopForever
 8000876:	e7fe      	b.n	8000876 <LoopForever>
  ldr   r0, =_estack
 8000878:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000884:	08000940 	.word	0x08000940
  ldr r2, =_sbss
 8000888:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800088c:	2000002c 	.word	0x2000002c

08000890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_2_IRQHandler>
	...

08000894 <__libc_init_array>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	2600      	movs	r6, #0
 8000898:	4d0c      	ldr	r5, [pc, #48]	@ (80008cc <__libc_init_array+0x38>)
 800089a:	4c0d      	ldr	r4, [pc, #52]	@ (80008d0 <__libc_init_array+0x3c>)
 800089c:	1b64      	subs	r4, r4, r5
 800089e:	10a4      	asrs	r4, r4, #2
 80008a0:	42a6      	cmp	r6, r4
 80008a2:	d109      	bne.n	80008b8 <__libc_init_array+0x24>
 80008a4:	f000 f81a 	bl	80008dc <_init>
 80008a8:	2600      	movs	r6, #0
 80008aa:	4d0a      	ldr	r5, [pc, #40]	@ (80008d4 <__libc_init_array+0x40>)
 80008ac:	4c0a      	ldr	r4, [pc, #40]	@ (80008d8 <__libc_init_array+0x44>)
 80008ae:	1b64      	subs	r4, r4, r5
 80008b0:	10a4      	asrs	r4, r4, #2
 80008b2:	42a6      	cmp	r6, r4
 80008b4:	d105      	bne.n	80008c2 <__libc_init_array+0x2e>
 80008b6:	bd70      	pop	{r4, r5, r6, pc}
 80008b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80008bc:	4798      	blx	r3
 80008be:	3601      	adds	r6, #1
 80008c0:	e7ee      	b.n	80008a0 <__libc_init_array+0xc>
 80008c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008c6:	4798      	blx	r3
 80008c8:	3601      	adds	r6, #1
 80008ca:	e7f2      	b.n	80008b2 <__libc_init_array+0x1e>
 80008cc:	08000938 	.word	0x08000938
 80008d0:	08000938 	.word	0x08000938
 80008d4:	08000938 	.word	0x08000938
 80008d8:	0800093c 	.word	0x0800093c

080008dc <_init>:
 80008dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008de:	bf00      	nop
 80008e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008e2:	bc08      	pop	{r3}
 80008e4:	469e      	mov	lr, r3
 80008e6:	4770      	bx	lr

080008e8 <_fini>:
 80008e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ea:	bf00      	nop
 80008ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ee:	bc08      	pop	{r3}
 80008f0:	469e      	mov	lr, r3
 80008f2:	4770      	bx	lr
