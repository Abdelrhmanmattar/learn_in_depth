
unit7_lesson4_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000084c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800097c  0800097c  0000197c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800099c  0800099c  000019a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800099c  0800099c  000019a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800099c  080009a4  000019a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800099c  0800099c  0000199c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009a0  080009a0  000019a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000019a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  080009a4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  080009a4  0000205c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000010cd  00000000  00000000  000019cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000517  00000000  00000000  00002a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000844  00000000  00000000  00002fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  000037f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000128  00000000  00000000  00003968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000c2d  00000000  00000000  00003a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021ad  00000000  00000000  000046bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a857  00000000  00000000  0000686a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000110c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000464  00000000  00000000  00011104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000964 	.word	0x08000964

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000964 	.word	0x08000964

08000170 <delay_ms>:
#include"LCD.h"


static void delay_ms(uint32_t time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++){
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	@ 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < time; i++){
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
		{}
	}
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <LCD_PINS_INIT>:

static void LCD_PINS_INIT(void) {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
    // Initialize LCD pins
    #if defined EIGHT_BIT_MODE
    // Initialize LCD data pins
    PIN_CONFIG_t data_pins;
    data_pins.GPIO_PinNumber = DATA_PIN_START;
 80001b2:	2300      	movs	r3, #0
 80001b4:	713b      	strb	r3, [r7, #4]
    data_pins.GPIO_PinMode = Output_General_PushPull;
 80001b6:	2300      	movs	r3, #0
 80001b8:	717b      	strb	r3, [r7, #5]
    data_pins.GPIO_Direction = Output_10MHz;
 80001ba:	2301      	movs	r3, #1
 80001bc:	71bb      	strb	r3, [r7, #6]

    for(uint8_t i=0; i<EIGHT_BIT_MODE ;i++)
 80001be:	2300      	movs	r3, #0
 80001c0:	71fb      	strb	r3, [r7, #7]
 80001c2:	e009      	b.n	80001d8 <LCD_PINS_INIT+0x2c>
    {
        data_pins.GPIO_PinNumber = DATA_PIN_START + i;
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	713b      	strb	r3, [r7, #4]
        MCAL_GPIO_Init(LCD_CONTROL_PORT, &data_pins);
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	4619      	mov	r1, r3
 80001cc:	481a      	ldr	r0, [pc, #104]	@ (8000238 <LCD_PINS_INIT+0x8c>)
 80001ce:	f000 fa79 	bl	80006c4 <MCAL_GPIO_Init>
    for(uint8_t i=0; i<EIGHT_BIT_MODE ;i++)
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	3301      	adds	r3, #1
 80001d6:	71fb      	strb	r3, [r7, #7]
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	2b07      	cmp	r3, #7
 80001dc:	d9f2      	bls.n	80001c4 <LCD_PINS_INIT+0x18>
    }

    // Initialize LCD control pins
    PIN_CONFIG_t control_pins;
    control_pins.GPIO_PinNumber = RS_PIN;
 80001de:	2308      	movs	r3, #8
 80001e0:	703b      	strb	r3, [r7, #0]
    control_pins.GPIO_PinMode = Output_General_PushPull;
 80001e2:	2300      	movs	r3, #0
 80001e4:	707b      	strb	r3, [r7, #1]
    control_pins.GPIO_Direction = Output_10MHz;
 80001e6:	2301      	movs	r3, #1
 80001e8:	70bb      	strb	r3, [r7, #2]
    MCAL_GPIO_Init(LCD_CONTROL_PORT, &control_pins);
 80001ea:	463b      	mov	r3, r7
 80001ec:	4619      	mov	r1, r3
 80001ee:	4812      	ldr	r0, [pc, #72]	@ (8000238 <LCD_PINS_INIT+0x8c>)
 80001f0:	f000 fa68 	bl	80006c4 <MCAL_GPIO_Init>

    control_pins.GPIO_PinNumber = RW_PIN;
 80001f4:	2309      	movs	r3, #9
 80001f6:	703b      	strb	r3, [r7, #0]
    MCAL_GPIO_Init(LCD_CONTROL_PORT, &control_pins);
 80001f8:	463b      	mov	r3, r7
 80001fa:	4619      	mov	r1, r3
 80001fc:	480e      	ldr	r0, [pc, #56]	@ (8000238 <LCD_PINS_INIT+0x8c>)
 80001fe:	f000 fa61 	bl	80006c4 <MCAL_GPIO_Init>

    control_pins.GPIO_PinNumber = EN_PIN;
 8000202:	230a      	movs	r3, #10
 8000204:	703b      	strb	r3, [r7, #0]
    MCAL_GPIO_Init(LCD_CONTROL_PORT, &control_pins);
 8000206:	463b      	mov	r3, r7
 8000208:	4619      	mov	r1, r3
 800020a:	480b      	ldr	r0, [pc, #44]	@ (8000238 <LCD_PINS_INIT+0x8c>)
 800020c:	f000 fa5a 	bl	80006c4 <MCAL_GPIO_Init>



    #endif

    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS_PIN, GPIO_PIN_RESET);
 8000210:	2200      	movs	r2, #0
 8000212:	2108      	movs	r1, #8
 8000214:	4808      	ldr	r0, [pc, #32]	@ (8000238 <LCD_PINS_INIT+0x8c>)
 8000216:	f000 fabc 	bl	8000792 <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW_PIN, GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	2109      	movs	r1, #9
 800021e:	4806      	ldr	r0, [pc, #24]	@ (8000238 <LCD_PINS_INIT+0x8c>)
 8000220:	f000 fab7 	bl	8000792 <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN_PIN, GPIO_PIN_RESET);
 8000224:	2200      	movs	r2, #0
 8000226:	210a      	movs	r1, #10
 8000228:	4803      	ldr	r0, [pc, #12]	@ (8000238 <LCD_PINS_INIT+0x8c>)
 800022a:	f000 fab2 	bl	8000792 <MCAL_GPIO_WritePin>
}
 800022e:	bf00      	nop
 8000230:	3708      	adds	r7, #8
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40010800 	.word	0x40010800

0800023c <LCD_ENABLE_PULSE>:

void LCD_ENABLE_PULSE(void) {
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
    // Enable pulse
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN_PIN, GPIO_PIN_SET);
 8000240:	2201      	movs	r2, #1
 8000242:	210a      	movs	r1, #10
 8000244:	4807      	ldr	r0, [pc, #28]	@ (8000264 <LCD_ENABLE_PULSE+0x28>)
 8000246:	f000 faa4 	bl	8000792 <MCAL_GPIO_WritePin>
    delay_ms(20);
 800024a:	2014      	movs	r0, #20
 800024c:	f7ff ff90 	bl	8000170 <delay_ms>
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN_PIN, GPIO_PIN_RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	210a      	movs	r1, #10
 8000254:	4803      	ldr	r0, [pc, #12]	@ (8000264 <LCD_ENABLE_PULSE+0x28>)
 8000256:	f000 fa9c 	bl	8000792 <MCAL_GPIO_WritePin>
    delay_ms(20);
 800025a:	2014      	movs	r0, #20
 800025c:	f7ff ff88 	bl	8000170 <delay_ms>
}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40010800 	.word	0x40010800

08000268 <LCD_Init>:

void LCD_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
    // Initialize LCD AS 8-bit mode
    //delay for 20ms
    delay_ms(30);
 800026c:	201e      	movs	r0, #30
 800026e:	f7ff ff7f 	bl	8000170 <delay_ms>
    LCD_PINS_INIT();
 8000272:	f7ff ff9b 	bl	80001ac <LCD_PINS_INIT>
    delay_ms(30);
 8000276:	201e      	movs	r0, #30
 8000278:	f7ff ff7a 	bl	8000170 <delay_ms>
    #if defined EIGHT_BIT_MODE
    LCD_SendCommand(LCD_CLEAR_SCREEN);
 800027c:	2001      	movs	r0, #1
 800027e:	f000 f80f 	bl	80002a0 <LCD_SendCommand>
    LCD_SendCommand(LCD_FUNCTION_8BIT_2LINES);
 8000282:	2038      	movs	r0, #56	@ 0x38
 8000284:	f000 f80c 	bl	80002a0 <LCD_SendCommand>
    LCD_SendCommand(LCD_ENTRY_MODE);
 8000288:	2006      	movs	r0, #6
 800028a:	f000 f809 	bl	80002a0 <LCD_SendCommand>
    LCD_SendCommand(LCD_BEGIN_AT_FIRST_ROW);
 800028e:	2080      	movs	r0, #128	@ 0x80
 8000290:	f000 f806 	bl	80002a0 <LCD_SendCommand>
    LCD_SendCommand(LCD_DISP_ON_CURSOR_BLINK);
 8000294:	200f      	movs	r0, #15
 8000296:	f000 f803 	bl	80002a0 <LCD_SendCommand>
    LCD_SendCommand(LCD_FUNCTION_4BIT_2LINES);
    LCD_SendCommand(LCD_ENTRY_MODE);
    LCD_SendCommand(LCD_BEGIN_AT_FIRST_ROW);
    LCD_SendCommand(LCD_DISP_ON_CURSOR_BLINK);
    #endif
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t command)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
    // SEND COMMAND TO LCD
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS_PIN, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2108      	movs	r1, #8
 80002ae:	480e      	ldr	r0, [pc, #56]	@ (80002e8 <LCD_SendCommand+0x48>)
 80002b0:	f000 fa6f 	bl	8000792 <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW_PIN, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2109      	movs	r1, #9
 80002b8:	480b      	ldr	r0, [pc, #44]	@ (80002e8 <LCD_SendCommand+0x48>)
 80002ba:	f000 fa6a 	bl	8000792 <MCAL_GPIO_WritePin>

    #if defined EIGHT_BIT_MODE
    LCD_DATA_OUT_PORT &= ~(0xFF<<DATA_PIN_START);
 80002be:	4b0a      	ldr	r3, [pc, #40]	@ (80002e8 <LCD_SendCommand+0x48>)
 80002c0:	68db      	ldr	r3, [r3, #12]
 80002c2:	4a09      	ldr	r2, [pc, #36]	@ (80002e8 <LCD_SendCommand+0x48>)
 80002c4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80002c8:	60d3      	str	r3, [r2, #12]
    LCD_DATA_OUT_PORT |=  (((uint16_t)command<<DATA_PIN_START));
 80002ca:	4b07      	ldr	r3, [pc, #28]	@ (80002e8 <LCD_SendCommand+0x48>)
 80002cc:	68da      	ldr	r2, [r3, #12]
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	4905      	ldr	r1, [pc, #20]	@ (80002e8 <LCD_SendCommand+0x48>)
 80002d2:	4313      	orrs	r3, r2
 80002d4:	60cb      	str	r3, [r1, #12]
    LCD_ENABLE_PULSE();
 80002d6:	f7ff ffb1 	bl	800023c <LCD_ENABLE_PULSE>

    LCD_DATA_OUT_PORT &= ~(0X000F<<DATA_PIN_START);
    LCD_DATA_OUT_PORT |= ((uint16_t)(command & 0X0F)<<DATA_PIN_START);
    LCD_ENABLE_PULSE();
    #endif
    delay_ms(30);
 80002da:	201e      	movs	r0, #30
 80002dc:	f7ff ff48 	bl	8000170 <delay_ms>
}
 80002e0:	bf00      	nop
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40010800 	.word	0x40010800

080002ec <LCD_Sendchar>:

void LCD_Sendchar(uint8_t data)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS_PIN, GPIO_PIN_SET);
 80002f6:	2201      	movs	r2, #1
 80002f8:	2108      	movs	r1, #8
 80002fa:	480d      	ldr	r0, [pc, #52]	@ (8000330 <LCD_Sendchar+0x44>)
 80002fc:	f000 fa49 	bl	8000792 <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW_PIN, GPIO_PIN_RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	2109      	movs	r1, #9
 8000304:	480a      	ldr	r0, [pc, #40]	@ (8000330 <LCD_Sendchar+0x44>)
 8000306:	f000 fa44 	bl	8000792 <MCAL_GPIO_WritePin>

    #if defined EIGHT_BIT_MODE
    LCD_DATA_OUT_PORT &= ~(0xFF<<DATA_PIN_START);
 800030a:	4b09      	ldr	r3, [pc, #36]	@ (8000330 <LCD_Sendchar+0x44>)
 800030c:	68db      	ldr	r3, [r3, #12]
 800030e:	4a08      	ldr	r2, [pc, #32]	@ (8000330 <LCD_Sendchar+0x44>)
 8000310:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000314:	60d3      	str	r3, [r2, #12]
    LCD_DATA_OUT_PORT |= ( ((uint16_t)data<<DATA_PIN_START));
 8000316:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <LCD_Sendchar+0x44>)
 8000318:	68da      	ldr	r2, [r3, #12]
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	4904      	ldr	r1, [pc, #16]	@ (8000330 <LCD_Sendchar+0x44>)
 800031e:	4313      	orrs	r3, r2
 8000320:	60cb      	str	r3, [r1, #12]
    LCD_ENABLE_PULSE();
 8000322:	f7ff ff8b 	bl	800023c <LCD_ENABLE_PULSE>

    LCD_DATA_OUT_PORT &= ~(0X000F<<DATA_PIN_START);
    LCD_DATA_OUT_PORT |= ((uint16_t)(data & 0X0F)<<DATA_PIN_START);
    LCD_ENABLE_PULSE();
    #endif
}
 8000326:	bf00      	nop
 8000328:	3708      	adds	r7, #8
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40010800 	.word	0x40010800

08000334 <LCD_SendString>:

void LCD_SendString(const uint8_t *data)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
    uint8_t count = 0;
 800033c:	2300      	movs	r3, #0
 800033e:	73fb      	strb	r3, [r7, #15]
    while(*data)
 8000340:	e018      	b.n	8000374 <LCD_SendString+0x40>
    {
        LCD_Sendchar(*data);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ffd0 	bl	80002ec <LCD_Sendchar>
        data++;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	3301      	adds	r3, #1
 8000350:	607b      	str	r3, [r7, #4]
        count++;
 8000352:	7bfb      	ldrb	r3, [r7, #15]
 8000354:	3301      	adds	r3, #1
 8000356:	73fb      	strb	r3, [r7, #15]
        if(count == 16)
 8000358:	7bfb      	ldrb	r3, [r7, #15]
 800035a:	2b10      	cmp	r3, #16
 800035c:	d102      	bne.n	8000364 <LCD_SendString+0x30>
        {
            LCD_SendCommand(LCD_BEGIN_AT_SECOND_ROW);
 800035e:	20c0      	movs	r0, #192	@ 0xc0
 8000360:	f7ff ff9e 	bl	80002a0 <LCD_SendCommand>
        }
        if (count == 32)
 8000364:	7bfb      	ldrb	r3, [r7, #15]
 8000366:	2b20      	cmp	r3, #32
 8000368:	d104      	bne.n	8000374 <LCD_SendString+0x40>
        {
            LCD_SendCommand(LCD_BEGIN_AT_FIRST_ROW);
 800036a:	2080      	movs	r0, #128	@ 0x80
 800036c:	f7ff ff98 	bl	80002a0 <LCD_SendCommand>
            count =0;
 8000370:	2300      	movs	r3, #0
 8000372:	73fb      	strb	r3, [r7, #15]
    while(*data)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d1e2      	bne.n	8000342 <LCD_SendString+0xe>
        }        
    }
}
 800037c:	bf00      	nop
 800037e:	bf00      	nop
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <EXTI0_IRQHandler>:
//arrray of POINTERS TO ISRs
void (*EXTI_IRQ_FUN[16])(void) ;


void EXTI0_IRQHandler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
    EXTI_IRQ_FUN[0]();
 800038c:	4b05      	ldr	r3, [pc, #20]	@ (80003a4 <EXTI0_IRQHandler+0x1c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4798      	blx	r3
    SET_BIT(EXTI->PR, 0);
 8000392:	4b05      	ldr	r3, [pc, #20]	@ (80003a8 <EXTI0_IRQHandler+0x20>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a04      	ldr	r2, [pc, #16]	@ (80003a8 <EXTI0_IRQHandler+0x20>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6153      	str	r3, [r2, #20]
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	2000001c 	.word	0x2000001c
 80003a8:	40010400 	.word	0x40010400

080003ac <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
    EXTI_IRQ_FUN[1]();
 80003b0:	4b05      	ldr	r3, [pc, #20]	@ (80003c8 <EXTI1_IRQHandler+0x1c>)
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	4798      	blx	r3
    SET_BIT(EXTI->PR, 1);
 80003b6:	4b05      	ldr	r3, [pc, #20]	@ (80003cc <EXTI1_IRQHandler+0x20>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a04      	ldr	r2, [pc, #16]	@ (80003cc <EXTI1_IRQHandler+0x20>)
 80003bc:	f043 0302 	orr.w	r3, r3, #2
 80003c0:	6153      	str	r3, [r2, #20]
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	2000001c 	.word	0x2000001c
 80003cc:	40010400 	.word	0x40010400

080003d0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
    EXTI_IRQ_FUN[2]();
 80003d4:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <EXTI2_IRQHandler+0x1c>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	4798      	blx	r3
    SET_BIT(EXTI->PR, 2);
 80003da:	4b05      	ldr	r3, [pc, #20]	@ (80003f0 <EXTI2_IRQHandler+0x20>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a04      	ldr	r2, [pc, #16]	@ (80003f0 <EXTI2_IRQHandler+0x20>)
 80003e0:	f043 0304 	orr.w	r3, r3, #4
 80003e4:	6153      	str	r3, [r2, #20]
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	2000001c 	.word	0x2000001c
 80003f0:	40010400 	.word	0x40010400

080003f4 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
    EXTI_IRQ_FUN[3]();
 80003f8:	4b05      	ldr	r3, [pc, #20]	@ (8000410 <EXTI3_IRQHandler+0x1c>)
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	4798      	blx	r3
    SET_BIT(EXTI->PR, 3);
 80003fe:	4b05      	ldr	r3, [pc, #20]	@ (8000414 <EXTI3_IRQHandler+0x20>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a04      	ldr	r2, [pc, #16]	@ (8000414 <EXTI3_IRQHandler+0x20>)
 8000404:	f043 0308 	orr.w	r3, r3, #8
 8000408:	6153      	str	r3, [r2, #20]
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	2000001c 	.word	0x2000001c
 8000414:	40010400 	.word	0x40010400

08000418 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
    EXTI_IRQ_FUN[4]();
 800041c:	4b05      	ldr	r3, [pc, #20]	@ (8000434 <EXTI4_IRQHandler+0x1c>)
 800041e:	691b      	ldr	r3, [r3, #16]
 8000420:	4798      	blx	r3
    SET_BIT(EXTI->PR, 4);
 8000422:	4b05      	ldr	r3, [pc, #20]	@ (8000438 <EXTI4_IRQHandler+0x20>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a04      	ldr	r2, [pc, #16]	@ (8000438 <EXTI4_IRQHandler+0x20>)
 8000428:	f043 0310 	orr.w	r3, r3, #16
 800042c:	6153      	str	r3, [r2, #20]
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	2000001c 	.word	0x2000001c
 8000438:	40010400 	.word	0x40010400

0800043c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
    for(uint8_t i = 5; i < 10; i++)
 8000442:	2305      	movs	r3, #5
 8000444:	71fb      	strb	r3, [r7, #7]
 8000446:	e01d      	b.n	8000484 <EXTI9_5_IRQHandler+0x48>
    {
        if(READ_BIT(EXTI->PR, i))
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <EXTI9_5_IRQHandler+0x58>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	79fa      	ldrb	r2, [r7, #7]
 800044e:	2101      	movs	r1, #1
 8000450:	fa01 f202 	lsl.w	r2, r1, r2
 8000454:	401a      	ands	r2, r3
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	fa22 f303 	lsr.w	r3, r2, r3
 800045c:	2b00      	cmp	r3, #0
 800045e:	d00e      	beq.n	800047e <EXTI9_5_IRQHandler+0x42>
        {
            EXTI_IRQ_FUN[i]();
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	4a0d      	ldr	r2, [pc, #52]	@ (8000498 <EXTI9_5_IRQHandler+0x5c>)
 8000464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000468:	4798      	blx	r3
            SET_BIT(EXTI->PR, i);
 800046a:	4b0a      	ldr	r3, [pc, #40]	@ (8000494 <EXTI9_5_IRQHandler+0x58>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	79fa      	ldrb	r2, [r7, #7]
 8000470:	2101      	movs	r1, #1
 8000472:	fa01 f202 	lsl.w	r2, r1, r2
 8000476:	4611      	mov	r1, r2
 8000478:	4a06      	ldr	r2, [pc, #24]	@ (8000494 <EXTI9_5_IRQHandler+0x58>)
 800047a:	430b      	orrs	r3, r1
 800047c:	6153      	str	r3, [r2, #20]
    for(uint8_t i = 5; i < 10; i++)
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	3301      	adds	r3, #1
 8000482:	71fb      	strb	r3, [r7, #7]
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	2b09      	cmp	r3, #9
 8000488:	d9de      	bls.n	8000448 <EXTI9_5_IRQHandler+0xc>
        }
    }
}
 800048a:	bf00      	nop
 800048c:	bf00      	nop
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40010400 	.word	0x40010400
 8000498:	2000001c 	.word	0x2000001c

0800049c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
    for(uint8_t i = 10; i < 16; i++)
 80004a2:	230a      	movs	r3, #10
 80004a4:	71fb      	strb	r3, [r7, #7]
 80004a6:	e01d      	b.n	80004e4 <EXTI15_10_IRQHandler+0x48>
    {
        if(READ_BIT(EXTI->PR, i))
 80004a8:	4b12      	ldr	r3, [pc, #72]	@ (80004f4 <EXTI15_10_IRQHandler+0x58>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	79fa      	ldrb	r2, [r7, #7]
 80004ae:	2101      	movs	r1, #1
 80004b0:	fa01 f202 	lsl.w	r2, r1, r2
 80004b4:	401a      	ands	r2, r3
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	fa22 f303 	lsr.w	r3, r2, r3
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d00e      	beq.n	80004de <EXTI15_10_IRQHandler+0x42>
        {
            EXTI_IRQ_FUN[i]();
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	4a0d      	ldr	r2, [pc, #52]	@ (80004f8 <EXTI15_10_IRQHandler+0x5c>)
 80004c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c8:	4798      	blx	r3
            SET_BIT(EXTI->PR, i);
 80004ca:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <EXTI15_10_IRQHandler+0x58>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	79fa      	ldrb	r2, [r7, #7]
 80004d0:	2101      	movs	r1, #1
 80004d2:	fa01 f202 	lsl.w	r2, r1, r2
 80004d6:	4611      	mov	r1, r2
 80004d8:	4a06      	ldr	r2, [pc, #24]	@ (80004f4 <EXTI15_10_IRQHandler+0x58>)
 80004da:	430b      	orrs	r3, r1
 80004dc:	6153      	str	r3, [r2, #20]
    for(uint8_t i = 10; i < 16; i++)
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	3301      	adds	r3, #1
 80004e2:	71fb      	strb	r3, [r7, #7]
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	2b0f      	cmp	r3, #15
 80004e8:	d9de      	bls.n	80004a8 <EXTI15_10_IRQHandler+0xc>
        }
    }
}
 80004ea:	bf00      	nop
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40010400 	.word	0x40010400
 80004f8:	2000001c 	.word	0x2000001c

080004fc <EXTI_INIT>:




void EXTI_INIT(EXTI_PIN_Config_t *pEXTI_PIN_Config)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
    EXTI_UPDATE(pEXTI_PIN_Config);
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f000 f805 	bl	8000514 <EXTI_UPDATE>
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <EXTI_UPDATE>:
    EXTI->FTSR  = 0x00000000;
    EXTI->SWIER = 0x00000000;
    EXTI->PR    = 0xFFFFFFFF;
}
void EXTI_UPDATE(EXTI_PIN_Config_t *pEXTI_PIN_Config)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
    //1. Configure the GPIO pin as input
    PIN_CONFIG_t pin_conf;
    pin_conf.GPIO_PinNumber = pEXTI_PIN_Config->pin_conf.GPIO_Pin;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	791b      	ldrb	r3, [r3, #4]
 8000520:	723b      	strb	r3, [r7, #8]
    pin_conf.GPIO_Direction = Input;
 8000522:	2300      	movs	r3, #0
 8000524:	72bb      	strb	r3, [r7, #10]
    pin_conf.GPIO_PinMode = Floating;
 8000526:	2301      	movs	r3, #1
 8000528:	727b      	strb	r3, [r7, #9]
    MCAL_GPIO_Init(pEXTI_PIN_Config->pin_conf.pGPIOx, &pin_conf);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f107 0208 	add.w	r2, r7, #8
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f8c5 	bl	80006c4 <MCAL_GPIO_Init>

    //2. configure the AFIO register
    uint8_t index_EXTICR = pEXTI_PIN_Config->pin_conf.GPIO_Pin / 4;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	791b      	ldrb	r3, [r3, #4]
 800053e:	089b      	lsrs	r3, r3, #2
 8000540:	73fb      	strb	r3, [r7, #15]
    uint8_t postion_EXTICR = (pEXTI_PIN_Config->pin_conf.GPIO_Pin % 4) * 4;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	791b      	ldrb	r3, [r3, #4]
 8000546:	f003 0303 	and.w	r3, r3, #3
 800054a:	b2db      	uxtb	r3, r3
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	73bb      	strb	r3, [r7, #14]

    AFIO->EXTICR[index_EXTICR] &= ~(0xF << postion_EXTICR);
 8000550:	4a57      	ldr	r2, [pc, #348]	@ (80006b0 <EXTI_UPDATE+0x19c>)
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	3302      	adds	r3, #2
 8000556:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800055a:	7bbb      	ldrb	r3, [r7, #14]
 800055c:	210f      	movs	r1, #15
 800055e:	fa01 f303 	lsl.w	r3, r1, r3
 8000562:	43db      	mvns	r3, r3
 8000564:	4618      	mov	r0, r3
 8000566:	4952      	ldr	r1, [pc, #328]	@ (80006b0 <EXTI_UPDATE+0x19c>)
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	4002      	ands	r2, r0
 800056c:	3302      	adds	r3, #2
 800056e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint8_t new_value = ((uint32_t)(pEXTI_PIN_Config->pin_conf.pGPIOx) - (uint32_t)(GPIOA)) / GPIO_OFFSET;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800057a:	f5a3 3384 	sub.w	r3, r3, #67584	@ 0x10800
 800057e:	0a9b      	lsrs	r3, r3, #10
 8000580:	737b      	strb	r3, [r7, #13]
    AFIO->EXTICR[index_EXTICR] |= (new_value << postion_EXTICR);
 8000582:	4a4b      	ldr	r2, [pc, #300]	@ (80006b0 <EXTI_UPDATE+0x19c>)
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	3302      	adds	r3, #2
 8000588:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800058c:	7b79      	ldrb	r1, [r7, #13]
 800058e:	7bbb      	ldrb	r3, [r7, #14]
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	4618      	mov	r0, r3
 8000596:	4946      	ldr	r1, [pc, #280]	@ (80006b0 <EXTI_UPDATE+0x19c>)
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	4302      	orrs	r2, r0
 800059c:	3302      	adds	r3, #2
 800059e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    //3. Configure the Trigger mode
    CLR_BIT(EXTI->RTSR, pEXTI_PIN_Config->pin_conf.GPIO_Pin);
 80005a2:	4b44      	ldr	r3, [pc, #272]	@ (80006b4 <EXTI_UPDATE+0x1a0>)
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	7912      	ldrb	r2, [r2, #4]
 80005aa:	4611      	mov	r1, r2
 80005ac:	2201      	movs	r2, #1
 80005ae:	408a      	lsls	r2, r1
 80005b0:	43d2      	mvns	r2, r2
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a3f      	ldr	r2, [pc, #252]	@ (80006b4 <EXTI_UPDATE+0x1a0>)
 80005b6:	400b      	ands	r3, r1
 80005b8:	6093      	str	r3, [r2, #8]
    CLR_BIT(EXTI->FTSR, pEXTI_PIN_Config->pin_conf.GPIO_Pin);
 80005ba:	4b3e      	ldr	r3, [pc, #248]	@ (80006b4 <EXTI_UPDATE+0x1a0>)
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	7912      	ldrb	r2, [r2, #4]
 80005c2:	4611      	mov	r1, r2
 80005c4:	2201      	movs	r2, #1
 80005c6:	408a      	lsls	r2, r1
 80005c8:	43d2      	mvns	r2, r2
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a39      	ldr	r2, [pc, #228]	@ (80006b4 <EXTI_UPDATE+0x1a0>)
 80005ce:	400b      	ands	r3, r1
 80005d0:	60d3      	str	r3, [r2, #12]

    EXTI->RTSR |= ((pEXTI_PIN_Config->TRIGGER_MODE & 0x1)        << pEXTI_PIN_Config->pin_conf.GPIO_Pin);
 80005d2:	4b38      	ldr	r3, [pc, #224]	@ (80006b4 <EXTI_UPDATE+0x1a0>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	7a12      	ldrb	r2, [r2, #8]
 80005da:	f002 0201 	and.w	r2, r2, #1
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	7909      	ldrb	r1, [r1, #4]
 80005e2:	408a      	lsls	r2, r1
 80005e4:	4611      	mov	r1, r2
 80005e6:	4a33      	ldr	r2, [pc, #204]	@ (80006b4 <EXTI_UPDATE+0x1a0>)
 80005e8:	430b      	orrs	r3, r1
 80005ea:	6093      	str	r3, [r2, #8]
    EXTI->FTSR |= (((pEXTI_PIN_Config->TRIGGER_MODE >> 1) & 0x1) << pEXTI_PIN_Config->pin_conf.GPIO_Pin);
 80005ec:	4b31      	ldr	r3, [pc, #196]	@ (80006b4 <EXTI_UPDATE+0x1a0>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	7a12      	ldrb	r2, [r2, #8]
 80005f4:	0852      	lsrs	r2, r2, #1
 80005f6:	b2d2      	uxtb	r2, r2
 80005f8:	f002 0201 	and.w	r2, r2, #1
 80005fc:	6879      	ldr	r1, [r7, #4]
 80005fe:	7909      	ldrb	r1, [r1, #4]
 8000600:	408a      	lsls	r2, r1
 8000602:	4611      	mov	r1, r2
 8000604:	4a2b      	ldr	r2, [pc, #172]	@ (80006b4 <EXTI_UPDATE+0x1a0>)
 8000606:	430b      	orrs	r3, r1
 8000608:	60d3      	str	r3, [r2, #12]
    
    //4. point to the ISR
    EXTI_IRQ_FUN[pEXTI_PIN_Config->pin_conf.GPIO_Pin] = pEXTI_PIN_Config->pCallback;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	791b      	ldrb	r3, [r3, #4]
 800060e:	4619      	mov	r1, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	4a28      	ldr	r2, [pc, #160]	@ (80006b8 <EXTI_UPDATE+0x1a4>)
 8000616:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    //5. Enable the EXTI interrupt
    //6. Enable the NVIC interrupt
    if(pEXTI_PIN_Config->IRQ_Enable)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	7a5b      	ldrb	r3, [r3, #9]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d020      	beq.n	8000664 <EXTI_UPDATE+0x150>
    {
        SET_BIT(EXTI->IMR, pEXTI_PIN_Config->pin_conf.GPIO_Pin);
 8000622:	4b24      	ldr	r3, [pc, #144]	@ (80006b4 <EXTI_UPDATE+0x1a0>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	7912      	ldrb	r2, [r2, #4]
 800062a:	4611      	mov	r1, r2
 800062c:	2201      	movs	r2, #1
 800062e:	408a      	lsls	r2, r1
 8000630:	4611      	mov	r1, r2
 8000632:	4a20      	ldr	r2, [pc, #128]	@ (80006b4 <EXTI_UPDATE+0x1a0>)
 8000634:	430b      	orrs	r3, r1
 8000636:	6013      	str	r3, [r2, #0]
        NVIC_ENABLE_IRQ(pEXTI_PIN_Config->pin_conf.IVT_IRQ_Number);
 8000638:	4a20      	ldr	r2, [pc, #128]	@ (80006bc <EXTI_UPDATE+0x1a8>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	795b      	ldrb	r3, [r3, #5]
 800063e:	095b      	lsrs	r3, r3, #5
 8000640:	b2d8      	uxtb	r0, r3
 8000642:	4603      	mov	r3, r0
 8000644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	7952      	ldrb	r2, [r2, #5]
 800064c:	f002 021f 	and.w	r2, r2, #31
 8000650:	2101      	movs	r1, #1
 8000652:	fa01 f202 	lsl.w	r2, r1, r2
 8000656:	4614      	mov	r4, r2
 8000658:	4a18      	ldr	r2, [pc, #96]	@ (80006bc <EXTI_UPDATE+0x1a8>)
 800065a:	4601      	mov	r1, r0
 800065c:	4323      	orrs	r3, r4
 800065e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    else
    {
        CLR_BIT(EXTI->IMR, pEXTI_PIN_Config->pin_conf.GPIO_Pin);
        NVIC_DISABLE_IRQ(pEXTI_PIN_Config->pin_conf.IVT_IRQ_Number);
    }
}
 8000662:	e020      	b.n	80006a6 <EXTI_UPDATE+0x192>
        CLR_BIT(EXTI->IMR, pEXTI_PIN_Config->pin_conf.GPIO_Pin);
 8000664:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <EXTI_UPDATE+0x1a0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	7912      	ldrb	r2, [r2, #4]
 800066c:	4611      	mov	r1, r2
 800066e:	2201      	movs	r2, #1
 8000670:	408a      	lsls	r2, r1
 8000672:	43d2      	mvns	r2, r2
 8000674:	4611      	mov	r1, r2
 8000676:	4a0f      	ldr	r2, [pc, #60]	@ (80006b4 <EXTI_UPDATE+0x1a0>)
 8000678:	400b      	ands	r3, r1
 800067a:	6013      	str	r3, [r2, #0]
        NVIC_DISABLE_IRQ(pEXTI_PIN_Config->pin_conf.IVT_IRQ_Number);
 800067c:	4a10      	ldr	r2, [pc, #64]	@ (80006c0 <EXTI_UPDATE+0x1ac>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	795b      	ldrb	r3, [r3, #5]
 8000682:	095b      	lsrs	r3, r3, #5
 8000684:	b2d8      	uxtb	r0, r3
 8000686:	4603      	mov	r3, r0
 8000688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	7952      	ldrb	r2, [r2, #5]
 8000690:	f002 021f 	and.w	r2, r2, #31
 8000694:	2101      	movs	r1, #1
 8000696:	fa01 f202 	lsl.w	r2, r1, r2
 800069a:	4614      	mov	r4, r2
 800069c:	4a08      	ldr	r2, [pc, #32]	@ (80006c0 <EXTI_UPDATE+0x1ac>)
 800069e:	4601      	mov	r1, r0
 80006a0:	4323      	orrs	r3, r4
 80006a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd90      	pop	{r4, r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40010000 	.word	0x40010000
 80006b4:	40010400 	.word	0x40010400
 80006b8:	2000001c 	.word	0x2000001c
 80006bc:	e000e100 	.word	0xe000e100
 80006c0:	e000e700 	.word	0xe000e700

080006c4 <MCAL_GPIO_Init>:
#include "Stm32_F103C6_gpio_driver.h"

void MCAL_GPIO_Init(GPIOx_RegDef_t *GPIOx, PIN_CONFIG_t *pinConfig)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b087      	sub	sp, #28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
    volatile uint32_t *pGPIOx = (pinConfig->GPIO_PinNumber>7)?&GPIOx->CRH:&GPIOx->CRL;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b07      	cmp	r3, #7
 80006d4:	d902      	bls.n	80006dc <MCAL_GPIO_Init+0x18>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3304      	adds	r3, #4
 80006da:	e000      	b.n	80006de <MCAL_GPIO_Init+0x1a>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	617b      	str	r3, [r7, #20]

    // Clear the CNF bits and MODE bits before setting them
    uint32_t tem =  0x0000000f << (4*(pinConfig->GPIO_PinNumber%8));
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	f003 0307 	and.w	r3, r3, #7
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	220f      	movs	r2, #15
 80006ec:	fa02 f303 	lsl.w	r3, r2, r3
 80006f0:	613b      	str	r3, [r7, #16]
    *pGPIOx &= ~(tem);//%8 to get the pin number in the range of 8 - 15 for CRH and 0 - 7 for CRL
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	43db      	mvns	r3, r3
 80006fa:	401a      	ands	r2, r3
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	601a      	str	r2, [r3, #0]
    uint8_t temp = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	73fb      	strb	r3, [r7, #15]
    uint8_t mode = (pinConfig->GPIO_PinMode>2)?(2):pinConfig->GPIO_PinMode;
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	785b      	ldrb	r3, [r3, #1]
 8000708:	2b02      	cmp	r3, #2
 800070a:	bf28      	it	cs
 800070c:	2302      	movcs	r3, #2
 800070e:	73bb      	strb	r3, [r7, #14]
    temp |= ((mode<<2) | (pinConfig->GPIO_Direction));
 8000710:	7bbb      	ldrb	r3, [r7, #14]
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	b25a      	sxtb	r2, r3
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	789b      	ldrb	r3, [r3, #2]
 800071a:	b25b      	sxtb	r3, r3
 800071c:	4313      	orrs	r3, r2
 800071e:	b25a      	sxtb	r2, r3
 8000720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000724:	4313      	orrs	r3, r2
 8000726:	b25b      	sxtb	r3, r3
 8000728:	73fb      	strb	r3, [r7, #15]
    *pGPIOx |= (temp << (4*(pinConfig->GPIO_PinNumber%8)));
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	7bf9      	ldrb	r1, [r7, #15]
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	7812      	ldrb	r2, [r2, #0]
 8000734:	f002 0207 	and.w	r2, r2, #7
 8000738:	0092      	lsls	r2, r2, #2
 800073a:	fa01 f202 	lsl.w	r2, r1, r2
 800073e:	431a      	orrs	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	601a      	str	r2, [r3, #0]
    
    if(pinConfig->GPIO_Direction==Input)
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	789b      	ldrb	r3, [r3, #2]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d11d      	bne.n	8000788 <MCAL_GPIO_Init+0xc4>
    {
        if(pinConfig->GPIO_PinMode==Input_PullUp)
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	785b      	ldrb	r3, [r3, #1]
 8000750:	2b02      	cmp	r3, #2
 8000752:	d10a      	bne.n	800076a <MCAL_GPIO_Init+0xa6>
        {
            GPIOx->ODR |= (1<<pinConfig->GPIO_PinNumber);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	7812      	ldrb	r2, [r2, #0]
 800075c:	4611      	mov	r1, r2
 800075e:	2201      	movs	r2, #1
 8000760:	408a      	lsls	r2, r1
 8000762:	431a      	orrs	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	60da      	str	r2, [r3, #12]
        {
            GPIOx->ODR &= ~(1<<pinConfig->GPIO_PinNumber);
        }
    } 
    
}
 8000768:	e00e      	b.n	8000788 <MCAL_GPIO_Init+0xc4>
        else if(pinConfig->GPIO_PinMode==Input_PullDown)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	785b      	ldrb	r3, [r3, #1]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d10a      	bne.n	8000788 <MCAL_GPIO_Init+0xc4>
            GPIOx->ODR &= ~(1<<pinConfig->GPIO_PinNumber);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	683a      	ldr	r2, [r7, #0]
 8000778:	7812      	ldrb	r2, [r2, #0]
 800077a:	4611      	mov	r1, r2
 800077c:	2201      	movs	r2, #1
 800077e:	408a      	lsls	r2, r1
 8000780:	43d2      	mvns	r2, r2
 8000782:	401a      	ands	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	60da      	str	r2, [r3, #12]
}
 8000788:	bf00      	nop
 800078a:	371c      	adds	r7, #28
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <MCAL_GPIO_WritePin>:
{
    return (uint16_t)GPIOx->IDR;
}

void MCAL_GPIO_WritePin(GPIOx_RegDef_t *GPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	460b      	mov	r3, r1
 800079c:	70fb      	strb	r3, [r7, #3]
 800079e:	4613      	mov	r3, r2
 80007a0:	70bb      	strb	r3, [r7, #2]
    if (Value == GPIO_PIN_SET)
 80007a2:	78bb      	ldrb	r3, [r7, #2]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d109      	bne.n	80007bc <MCAL_GPIO_WritePin+0x2a>
    {
        GPIOx->ODR |= (1<<PinNumber);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	78fa      	ldrb	r2, [r7, #3]
 80007ae:	2101      	movs	r1, #1
 80007b0:	fa01 f202 	lsl.w	r2, r1, r2
 80007b4:	431a      	orrs	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	60da      	str	r2, [r3, #12]
    }
    else
    {
        GPIOx->ODR &= ~(1<<PinNumber);
    }
}
 80007ba:	e009      	b.n	80007d0 <MCAL_GPIO_WritePin+0x3e>
        GPIOx->ODR &= ~(1<<PinNumber);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	78fa      	ldrb	r2, [r7, #3]
 80007c2:	2101      	movs	r1, #1
 80007c4:	fa01 f202 	lsl.w	r2, r1, r2
 80007c8:	43d2      	mvns	r2, r2
 80007ca:	401a      	ands	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	60da      	str	r2, [r3, #12]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <delay_ms>:
#include "KEY_PAD.h"
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay_ms(uint32_t time) {
 80007da:	b480      	push	{r7}
 80007dc:	b085      	sub	sp, #20
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++){
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	e00b      	b.n	8000800 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	e002      	b.n	80007f4 <delay_ms+0x1a>
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	3301      	adds	r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	2bfe      	cmp	r3, #254	@ 0xfe
 80007f8:	d9f9      	bls.n	80007ee <delay_ms+0x14>
	for (i = 0; i < time; i++){
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3301      	adds	r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	429a      	cmp	r2, r3
 8000806:	d3ef      	bcc.n	80007e8 <delay_ms+0xe>
		{}
	}
}
 8000808:	bf00      	nop
 800080a:	bf00      	nop
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <exti_callback>:
void exti_callback(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  LCD_SendCommand(LCD_CLEAR_SCREEN);
 8000818:	2001      	movs	r0, #1
 800081a:	f7ff fd41 	bl	80002a0 <LCD_SendCommand>
  delay_ms(5);
 800081e:	2005      	movs	r0, #5
 8000820:	f7ff ffdb 	bl	80007da <delay_ms>
  LCD_SendString((const uint8_t *)"EXTI9_5 is here");
 8000824:	4807      	ldr	r0, [pc, #28]	@ (8000844 <exti_callback+0x30>)
 8000826:	f7ff fd85 	bl	8000334 <LCD_SendString>
  delay_ms(500);
 800082a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800082e:	f7ff ffd4 	bl	80007da <delay_ms>
  LCD_SendCommand(LCD_CLEAR_SCREEN);
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff fd34 	bl	80002a0 <LCD_SendCommand>
  delay_ms(5);
 8000838:	2005      	movs	r0, #5
 800083a:	f7ff ffce 	bl	80007da <delay_ms>
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	0800097c 	.word	0x0800097c

08000848 <main>:
int main(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
	GPIOA_ClockEnable();
 800084e:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <main+0x70>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a19      	ldr	r2, [pc, #100]	@ (80008b8 <main+0x70>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6193      	str	r3, [r2, #24]
	GPIOB_ClockEnable();
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <main+0x70>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <main+0x70>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6193      	str	r3, [r2, #24]
	AFIO_ClockEnable();
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <main+0x70>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	4a13      	ldr	r2, [pc, #76]	@ (80008b8 <main+0x70>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6193      	str	r3, [r2, #24]
  LCD_Init();
 8000872:	f7ff fcf9 	bl	8000268 <LCD_Init>
  EXTI_PIN_Config_t exti9;
  exti9.pin_conf = EXTI9PB9;
 8000876:	4a11      	ldr	r2, [pc, #68]	@ (80008bc <main+0x74>)
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000880:	e883 0003 	stmia.w	r3, {r0, r1}
  exti9.TRIGGER_MODE = 100;
 8000884:	2364      	movs	r3, #100	@ 0x64
 8000886:	743b      	strb	r3, [r7, #16]
  exti9.IRQ_Enable = 1;
 8000888:	2301      	movs	r3, #1
 800088a:	747b      	strb	r3, [r7, #17]
  exti9.pCallback = &exti_callback;
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <main+0x78>)
 800088e:	617b      	str	r3, [r7, #20]
  EXTI_INIT(&exti9);
 8000890:	f107 0308 	add.w	r3, r7, #8
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe31 	bl	80004fc <EXTI_INIT>
  LCD_SendString((const uint8_t *)"start");
 800089a:	480a      	ldr	r0, [pc, #40]	@ (80008c4 <main+0x7c>)
 800089c:	f7ff fd4a 	bl	8000334 <LCD_SendString>
  delay_ms(500);
 80008a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008a4:	f7ff ff99 	bl	80007da <delay_ms>
  LCD_SendCommand(LCD_CLEAR_SCREEN);
 80008a8:	2001      	movs	r0, #1
 80008aa:	f7ff fcf9 	bl	80002a0 <LCD_SendCommand>
  delay_ms(5);
 80008ae:	2005      	movs	r0, #5
 80008b0:	f7ff ff93 	bl	80007da <delay_ms>
    /* Loop forever */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <main+0x6c>
 80008b8:	40021000 	.word	0x40021000
 80008bc:	08000994 	.word	0x08000994
 80008c0:	08000815 	.word	0x08000815
 80008c4:	0800098c 	.word	0x0800098c

080008c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c8:	480d      	ldr	r0, [pc, #52]	@ (8000900 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d0:	480c      	ldr	r0, [pc, #48]	@ (8000904 <LoopForever+0x6>)
  ldr r1, =_edata
 80008d2:	490d      	ldr	r1, [pc, #52]	@ (8000908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d4:	4a0d      	ldr	r2, [pc, #52]	@ (800090c <LoopForever+0xe>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000914 <LoopForever+0x16>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008f6:	f000 f811 	bl	800091c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fa:	f7ff ffa5 	bl	8000848 <main>

080008fe <LoopForever>:

LoopForever:
  b LoopForever
 80008fe:	e7fe      	b.n	80008fe <LoopForever>
  ldr   r0, =_estack
 8000900:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800090c:	080009a4 	.word	0x080009a4
  ldr r2, =_sbss
 8000910:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000914:	2000005c 	.word	0x2000005c

08000918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC1_2_IRQHandler>
	...

0800091c <__libc_init_array>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	2600      	movs	r6, #0
 8000920:	4d0c      	ldr	r5, [pc, #48]	@ (8000954 <__libc_init_array+0x38>)
 8000922:	4c0d      	ldr	r4, [pc, #52]	@ (8000958 <__libc_init_array+0x3c>)
 8000924:	1b64      	subs	r4, r4, r5
 8000926:	10a4      	asrs	r4, r4, #2
 8000928:	42a6      	cmp	r6, r4
 800092a:	d109      	bne.n	8000940 <__libc_init_array+0x24>
 800092c:	f000 f81a 	bl	8000964 <_init>
 8000930:	2600      	movs	r6, #0
 8000932:	4d0a      	ldr	r5, [pc, #40]	@ (800095c <__libc_init_array+0x40>)
 8000934:	4c0a      	ldr	r4, [pc, #40]	@ (8000960 <__libc_init_array+0x44>)
 8000936:	1b64      	subs	r4, r4, r5
 8000938:	10a4      	asrs	r4, r4, #2
 800093a:	42a6      	cmp	r6, r4
 800093c:	d105      	bne.n	800094a <__libc_init_array+0x2e>
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f855 3b04 	ldr.w	r3, [r5], #4
 8000944:	4798      	blx	r3
 8000946:	3601      	adds	r6, #1
 8000948:	e7ee      	b.n	8000928 <__libc_init_array+0xc>
 800094a:	f855 3b04 	ldr.w	r3, [r5], #4
 800094e:	4798      	blx	r3
 8000950:	3601      	adds	r6, #1
 8000952:	e7f2      	b.n	800093a <__libc_init_array+0x1e>
 8000954:	0800099c 	.word	0x0800099c
 8000958:	0800099c 	.word	0x0800099c
 800095c:	0800099c 	.word	0x0800099c
 8000960:	080009a0 	.word	0x080009a0

08000964 <_init>:
 8000964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000966:	bf00      	nop
 8000968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800096a:	bc08      	pop	{r3}
 800096c:	469e      	mov	lr, r3
 800096e:	4770      	bx	lr

08000970 <_fini>:
 8000970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000972:	bf00      	nop
 8000974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000976:	bc08      	pop	{r3}
 8000978:	469e      	mov	lr, r3
 800097a:	4770      	bx	lr
